import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(lambda c: c.data == "copy_trade")
async def show_copy_trade_menu(callback_query: CallbackQuery):
    """Show main copy trade menu with list of configurations"""
    # Example data (will be replaced with real data later)
    example_configs = [
        {"id": 1, "name": "Whale Trader #1", "is_active": True},
        {"id": 2, "name": "DeFi Expert", "is_active": False},
        {"id": 3, "name": "SOL Trader", "is_active": True},
    ]
    
    keyboard = []
    
    # Add existing copy trade configurations
    for config in example_configs:
        status = "üü¢" if config["is_active"] else "‚≠ïÔ∏è"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {config['name']}", 
                callback_data=f"copy_settings:{config['id']}"
            )
        ])
    
    # Add control buttons
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="new_copy_trade")],
        [InlineKeyboardButton(text="üö´ –ò—Å–∫–ª—é—á–∏—Ç—å –¢–æ–∫–µ–Ω—ã", callback_data="exclude_tokens")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback_query.message.edit_text(
        "üìä Copy Trading\n\n"
        "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(lambda c: c.data.startswith("copy_settings:"))
async def show_copy_settings(callback_query: CallbackQuery):
    """Show settings for specific copy trade configuration"""
    config_id = callback_query.data.split(":")[1]
    
    # Example data (will be replaced with real data later)
    is_active = True
    wallet = "HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"
    name = "Whale Trader #1"
    
    keyboard = [
        # Basic settings
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name:{config_id}")],
        [InlineKeyboardButton(text="üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"edit_wallet:{config_id}")],
        [InlineKeyboardButton(text="‚öôÔ∏è –°–ª–∏–ø–∞–∂", callback_data=f"edit_slippage:{config_id}")],
        [InlineKeyboardButton(text="‚õΩÔ∏è Gas Fee", callback_data=f"edit_gas:{config_id}")],
        
        # Trade settings
        [InlineKeyboardButton(text="üìä % –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏", callback_data=f"edit_percentage:{config_id}")],
        [InlineKeyboardButton(text="üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ SOL", callback_data=f"edit_min_sol:{config_id}")],
        [InlineKeyboardButton(text="üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ SOL", callback_data=f"edit_max_sol:{config_id}")],
        [InlineKeyboardButton(text="üí∞ Total Investment SOL", callback_data=f"edit_total_investment:{config_id}")],
        
        # Additional settings
        [InlineKeyboardButton(text="üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ —Ç–æ–∫–µ–Ω–∞", callback_data=f"edit_buy_times:{config_id}")],
        [InlineKeyboardButton(text="üìâ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏", callback_data=f"edit_copy_sells:{config_id}")],
        [InlineKeyboardButton(text="üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", callback_data=f"edit_retries:{config_id}")],
        
        # Control buttons
        [InlineKeyboardButton(
            text=f"{'üü¢' if is_active else '‚≠ïÔ∏è'} –ê–∫—Ç–∏–≤–Ω—ã–π", 
            callback_data=f"toggle_active:{config_id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_copy:{config_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ]
    
    await callback_query.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üëõ –ö–æ—à–µ–ª–µ–∫: {wallet[:4]}...{wallet[-4:]}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(lambda c: c.data == "new_copy_trade")
async def new_copy_trade(callback_query: CallbackQuery):
    """Show new copy trade configuration menu"""
    keyboard = [
        [InlineKeyboardButton(text="üëõ –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ]
    
    await callback_query.message.edit_text(
        "‚ûï –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Copy Trading\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª–µ–∫, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(lambda c: c.data == "exclude_tokens")
async def exclude_tokens(callback_query: CallbackQuery):
    """Show token exclusion menu"""
    # Example data (will be replaced with real data later)
    excluded_tokens = [
        {"symbol": "TOKEN1", "address": "..."},
        {"symbol": "TOKEN2", "address": "..."},
    ]
    
    keyboard = []
    
    # Add excluded tokens
    for token in excluded_tokens:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {token['symbol']}", 
                callback_data=f"remove_excluded:{token['address']}"
            )
        ])
    
    # Add control buttons
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="add_excluded_token")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ])
    
    await callback_query.message.edit_text(
        "üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n\n"
        "–≠—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    ) 