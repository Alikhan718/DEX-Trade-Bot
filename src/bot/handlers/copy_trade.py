import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from ...database.models import CopyTrade, ExcludedToken, User
from ..services.copy_trade_service import CopyTradeService

router = Router()
logger = logging.getLogger(__name__)

class CopyTradeStates(StatesGroup):
    ENTER_NAME = State()
    ENTER_ADDRESS = State()
    ENTER_PERCENTAGE = State()
    ENTER_MIN_AMOUNT = State()
    ENTER_MAX_AMOUNT = State()
    ENTER_TOTAL_AMOUNT = State()
    ENTER_MAX_COPIES = State()
    ENTER_BUY_GAS = State()
    ENTER_SELL_GAS = State()
    ENTER_BUY_SLIPPAGE = State()
    ENTER_SELL_SLIPPAGE = State()
    ENTER_EXCLUDED_TOKEN = State()

@router.callback_query(F.data == "copy_trade")
async def show_copy_trade_menu(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await session.scalar(
        select(User).where(User.telegram_id == callback.from_user.id)
    )
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—Ç—Ä–µ–π–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(CopyTrade)
        .where(CopyTrade.user_id == user.id)
        .order_by(CopyTrade.created_at)
    )
    copy_trades = result.scalars().all()
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ø–∏—Ç—Ä–µ–π–¥—ã
    for ct in copy_trades:
        status = "‚úÖ" if ct.is_active else "üî¥"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {ct.name} ({ct.wallet_address[:6]}...)",
                callback_data=f"ct_settings:{ct.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="ct_add")],
        [InlineKeyboardButton(text="üö´ –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="ct_exclude_tokens")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        "ü§ñ Copy Trading\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ø–∏—Ç—Ä–µ–π–¥–æ–≤: {len(copy_trades)}/20",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "ct_add")
async def start_add_copy_trade(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    count = await session.scalar(
        select(func.count(CopyTrade.id))
        .where(CopyTrade.user_id == callback.from_user.id)
    )
    
    if count >= 20:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫–æ–ø–∏—Ç—Ä–µ–π–¥–æ–≤ (20)", show_alert=True)
        return
    
    keyboard = [[
        InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")
    ]]
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(CopyTradeStates.ENTER_NAME)

@router.callback_query(lambda c: c.data.startswith("ct_settings:"))
async def show_copy_settings(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    copy_trade_id = int(callback.data.split(":")[1])
    
    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.scalar_one_or_none()
    
    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"ct_edit_name:{ct.id}")],
        [InlineKeyboardButton(text="üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data=f"ct_edit_wallet:{ct.id}")],
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        [InlineKeyboardButton(text=f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {ct.copy_percentage}%", 
                            callback_data=f"ct_edit_percentage:{ct.id}")],
        [InlineKeyboardButton(text=f"üìâ –ú–∏–Ω. —Å—É–º–º–∞: {ct.min_amount} SOL", 
                            callback_data=f"ct_edit_min:{ct.id}")],
        [InlineKeyboardButton(text=f"üìà –ú–∞–∫—Å. —Å—É–º–º–∞: {ct.max_amount or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL", 
                            callback_data=f"ct_edit_max:{ct.id}")],
        [InlineKeyboardButton(text=f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {ct.total_amount or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL", 
                            callback_data=f"ct_edit_total:{ct.id}")],
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        [InlineKeyboardButton(text=f"üîÑ –ú–∞–∫—Å. –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞: {ct.max_copies_per_token or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}", 
                            callback_data=f"ct_edit_copies:{ct.id}")],
        [InlineKeyboardButton(text=f"‚ö°Ô∏è Buy Gas: {ct.buy_gas_fee}", 
                            callback_data=f"ct_edit_buy_gas:{ct.id}")],
        [InlineKeyboardButton(text=f"‚ö°Ô∏è Sell Gas: {ct.sell_gas_fee}", 
                            callback_data=f"ct_edit_sell_gas:{ct.id}")],
        [InlineKeyboardButton(text=f"üìä Buy Slippage: {ct.buy_slippage}%", 
                            callback_data=f"ct_edit_buy_slip:{ct.id}")],
        [InlineKeyboardButton(text=f"üìä Sell Slippage: {ct.sell_slippage}%", 
                            callback_data=f"ct_edit_sell_slip:{ct.id}")],
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton(text=f"{'‚úÖ' if ct.copy_sells else '‚ùå'} –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏", 
                            callback_data=f"ct_toggle_sells:{ct.id}")],
        [InlineKeyboardButton(text=f"{'‚úÖ' if ct.anti_mev else '‚ùå'} Anti-MEV", 
                            callback_data=f"ct_toggle_mev:{ct.id}")],
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if ct.is_active else 'üî¥'} –ê–∫—Ç–∏–≤–Ω—ã–π", 
            callback_data=f"ct_toggle_active:{ct.id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ct_delete:{ct.id}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ]
    
    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {ct.name}\n"
        f"üëõ –ö–æ—à–µ–ª–µ–∫: {ct.wallet_address[:6]}...{ct.wallet_address[-4:]}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if ct.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "ct_exclude_tokens")
async def show_excluded_tokens(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    user_id = callback.from_user.id
    
    result = await session.execute(
        select(ExcludedToken)
        .where(ExcludedToken.user_id == user_id)
        .order_by(ExcludedToken.created_at)
    )
    excluded_tokens = result.scalars().all()
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    for token in excluded_tokens:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {token.token_address[:6]}...{token.token_address[-4:]}", 
                callback_data=f"ct_remove_excluded:{token.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="ct_add_excluded")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ])
    
    await callback.message.edit_text(
        "üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n\n"
        "–≠—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    ) 

@router.message(CopyTradeStates.ENTER_NAME)
async def handle_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    name = message.text.strip()
    
    if len(name) > 32:
        await message.reply(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return
    
    await state.update_data(name=name)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
        ])
    )
    await state.set_state(CopyTradeStates.ENTER_ADDRESS)

@router.message(CopyTradeStates.ENTER_ADDRESS)
async def handle_address_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    address = message.text.strip()
    
    if len(address) != 44:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await session.scalar(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    
    if not user:
        await message.reply(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
    exists = await session.scalar(
        select(CopyTrade)
        .where(CopyTrade.user_id == user.id)
        .where(CopyTrade.wallet_address == address)
    )
    
    if exists:
        await message.reply(
            "‚ùå –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return
    
    await state.update_data(wallet_address=address)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ø–∏—Ç—Ä–µ–π–¥ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    data = await state.get_data()
    new_copy_trade = CopyTrade(
        user_id=user.id,
        name=data['name'],
        wallet_address=address,
        is_active=True,
        copy_percentage=100.0,
        min_amount=0.0,
        max_amount=None,
        total_amount=None,
        max_copies_per_token=None,
        copy_sells=True,
        retry_count=1,
        buy_gas_fee=100000,
        sell_gas_fee=100000,
        buy_slippage=1.0,
        sell_slippage=1.0,
        anti_mev=False
    )
    
    session.add(new_copy_trade)
    await session.commit()
    await session.refresh(new_copy_trade)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏—Ç—Ä–µ–π–¥ –≤ —Å–µ—Ä–≤–∏—Å
    service = CopyTradeService()
    await service.add_copy_trade(new_copy_trade)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"ct_edit_name:{new_copy_trade.id}")],
        [InlineKeyboardButton(text="üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞", callback_data=f"ct_edit_wallet:{new_copy_trade.id}")],
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        [InlineKeyboardButton(text=f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {new_copy_trade.copy_percentage}%", 
                            callback_data=f"ct_edit_percentage:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"üìâ –ú–∏–Ω. —Å—É–º–º–∞: {new_copy_trade.min_amount} SOL", 
                            callback_data=f"ct_edit_min:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"üìà –ú–∞–∫—Å. —Å—É–º–º–∞: {new_copy_trade.max_amount or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL", 
                            callback_data=f"ct_edit_max:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {new_copy_trade.total_amount or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL", 
                            callback_data=f"ct_edit_total:{new_copy_trade.id}")],
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        [InlineKeyboardButton(text=f"üîÑ –ú–∞–∫—Å. –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞: {new_copy_trade.max_copies_per_token or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}", 
                            callback_data=f"ct_edit_copies:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"‚ö°Ô∏è Buy Gas: {new_copy_trade.buy_gas_fee}", 
                            callback_data=f"ct_edit_buy_gas:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"‚ö°Ô∏è Sell Gas: {new_copy_trade.sell_gas_fee}", 
                            callback_data=f"ct_edit_sell_gas:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"üìä Buy Slippage: {new_copy_trade.buy_slippage}%", 
                            callback_data=f"ct_edit_buy_slip:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"üìä Sell Slippage: {new_copy_trade.sell_slippage}%", 
                            callback_data=f"ct_edit_sell_slip:{new_copy_trade.id}")],
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton(text=f"{'‚úÖ' if new_copy_trade.copy_sells else '‚ùå'} –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏", 
                            callback_data=f"ct_toggle_sells:{new_copy_trade.id}")],
        [InlineKeyboardButton(text=f"{'‚úÖ' if new_copy_trade.anti_mev else '‚ùå'} Anti-MEV", 
                            callback_data=f"ct_toggle_mev:{new_copy_trade.id}")],
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if new_copy_trade.is_active else 'üî¥'} –ê–∫—Ç–∏–≤–Ω—ã–π", 
            callback_data=f"ct_toggle_active:{new_copy_trade.id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"ct_delete:{new_copy_trade.id}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ]
    
    await message.reply(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {new_copy_trade.name}\n"
        f"üëõ –ö–æ—à–µ–ª–µ–∫: {new_copy_trade.wallet_address[:6]}...{new_copy_trade.wallet_address[-4:]}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if new_copy_trade.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("ct_edit_"))
async def handle_edit_setting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting = callback.data.split("_")[2].split(":")[0]
    copy_trade_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(copy_trade_id=copy_trade_id)
    
    messages = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        "wallet": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:",
        "percentage": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (1-100):",
        "min": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ SOL:",
        "max": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ SOL (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "total": "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –≤ SOL (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "copies": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "buy_gas": "–í–≤–µ–¥–∏—Ç–µ Gas Fee –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        "sell_gas": "–í–≤–µ–¥–∏—Ç–µ Gas Fee –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        "buy_slip": "–í–≤–µ–¥–∏—Ç–µ Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (%):",
        "sell_slip": "–í–≤–µ–¥–∏—Ç–µ Slippage –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (%):"
    }
    
    states = {
        "name": CopyTradeStates.ENTER_NAME,
        "wallet": CopyTradeStates.ENTER_ADDRESS,
        "percentage": CopyTradeStates.ENTER_PERCENTAGE,
        "min": CopyTradeStates.ENTER_MIN_AMOUNT,
        "max": CopyTradeStates.ENTER_MAX_AMOUNT,
        "total": CopyTradeStates.ENTER_TOTAL_AMOUNT,
        "copies": CopyTradeStates.ENTER_MAX_COPIES,
        "buy_gas": CopyTradeStates.ENTER_BUY_GAS,
        "sell_gas": CopyTradeStates.ENTER_SELL_GAS,
        "buy_slip": CopyTradeStates.ENTER_BUY_SLIPPAGE,
        "sell_slip": CopyTradeStates.ENTER_SELL_SLIPPAGE
    }
    
    if setting in messages:
        await callback.message.edit_text(
            messages[setting],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{copy_trade_id}"
                )]
            ])
        )
        await state.set_state(states[setting])

@router.callback_query(lambda c: c.data.startswith("ct_toggle_"))
async def handle_toggle_setting(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting = callback.data.split("_")[2].split(":")[0]
    copy_trade_id = int(callback.data.split(":")[1])
    
    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.scalar_one_or_none()
    
    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if setting == "active":
        ct.is_active = not ct.is_active
        message = f"–ö–æ–ø–∏—Ç—Ä–µ–π–¥ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if ct.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}"
    elif setting == "sells":
        ct.copy_sells = not ct.copy_sells
        message = f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ {'–≤–∫–ª—é—á–µ–Ω–æ' if ct.copy_sells else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}"
    elif setting == "mev":
        ct.anti_mev = not ct.anti_mev
        message = f"Anti-MEV {'–≤–∫–ª—é—á–µ–Ω' if ct.anti_mev else '–æ—Ç–∫–ª—é—á–µ–Ω'}"
    
    await session.commit()
    await callback.answer(message)
    await show_copy_settings(callback, session)

@router.callback_query(lambda c: c.data.startswith("ct_delete:"))
async def handle_delete_copy_trade(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    copy_trade_id = int(callback.data.split(":")[1])
    
    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.scalar_one_or_none()
    
    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –±–∞–∑—ã
    service = CopyTradeService()
    await service.remove_copy_trade(ct)
    
    await session.delete(ct)
    await session.commit()
    
    await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ —É–¥–∞–ª–µ–Ω")
    await show_copy_trade_menu(callback, session)

@router.callback_query(F.data == "ct_add_excluded")
async def start_add_excluded_token(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
        ])
    )
    await state.set_state(CopyTradeStates.ENTER_EXCLUDED_TOKEN)

@router.message(CopyTradeStates.ENTER_EXCLUDED_TOKEN)
async def handle_excluded_token_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏—Å–∫–ª—é—á–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token_address = message.text.strip()
    
    if len(token_address) != 44:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
    exists = await session.scalar(
        select(ExcludedToken)
        .where(ExcludedToken.user_id == message.from_user.id)
        .where(ExcludedToken.token_address == token_address)
    )
    
    if exists:
        await message.reply(
            "‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    new_excluded = ExcludedToken(
        user_id=message.from_user.id,
        token_address=token_address
    )
    
    session.add(new_excluded)
    await session.commit()
    
    await state.clear()
    await show_excluded_tokens(
        callback=CallbackQuery(message=message, data="ct_exclude_tokens"),
        session=session
    )

@router.callback_query(lambda c: c.data.startswith("ct_remove_excluded:"))
async def handle_remove_excluded_token(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token_id = int(callback.data.split(":")[1])
    
    result = await session.execute(
        select(ExcludedToken).where(ExcludedToken.id == token_id)
    )
    token = result.scalar_one_or_none()
    
    if not token:
        await callback.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await session.delete(token)
    await session.commit()
    
    await callback.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    await show_excluded_tokens(callback, session)

@router.message(CopyTradeStates.ENTER_PERCENTAGE)
async def handle_percentage_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        percentage = float(message.text.replace(",", "."))
        if percentage <= 0 or percentage > 100:
            raise ValueError("Invalid percentage")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.copy_percentage = percentage
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_MIN_AMOUNT)
async def handle_min_amount_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 0:
            raise ValueError("Invalid amount")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.min_amount = amount
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_MAX_AMOUNT)
async def handle_max_amount_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 0:
            raise ValueError("Invalid amount")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.max_amount = amount if amount > 0 else None
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_TOTAL_AMOUNT)
async def handle_total_amount_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 0:
            raise ValueError("Invalid amount")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.total_amount = amount if amount > 0 else None
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_MAX_COPIES)
async def handle_max_copies_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
    try:
        copies = int(message.text)
        if copies < 0:
            raise ValueError("Invalid copies")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.max_copies_per_token = copies if copies > 0 else None
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_BUY_GAS)
async def handle_buy_gas_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Gas Fee –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        gas = int(message.text)
        if gas <= 0:
            raise ValueError("Invalid gas")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.buy_gas_fee = gas
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_SELL_GAS)
async def handle_sell_gas_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Gas Fee –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        gas = int(message.text)
        if gas <= 0:
            raise ValueError("Invalid gas")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.sell_gas_fee = gas
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_BUY_SLIPPAGE)
async def handle_buy_slippage_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        slippage = float(message.text.replace(",", "."))
        if slippage <= 0 or slippage > 100:
            raise ValueError("Invalid slippage")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.buy_slippage = slippage
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.message(CopyTradeStates.ENTER_SELL_SLIPPAGE)
async def handle_sell_slippage_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Slippage –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        slippage = float(message.text.replace(",", "."))
        if slippage <= 0 or slippage > 100:
            raise ValueError("Invalid slippage")
        
        data = await state.get_data()
        copy_trade_id = data["copy_trade_id"]
        
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        ct = result.scalar_one_or_none()
        
        if not ct:
            await message.reply("‚ùå –ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ct.sell_slippage = slippage
        await session.commit()
        
        await state.clear()
        await show_copy_settings(
            callback=CallbackQuery(message=message, data=f"ct_settings:{copy_trade_id}"),
            session=session
        )
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="¬´ –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"ct_settings:{data['copy_trade_id']}"
                )]
            ])
        )

@router.callback_query(lambda c: c.data.startswith("ct_toggle_active:"))
async def handle_toggle_active(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    copy_trade_id = int(callback.data.split(":")[1])
    
    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.scalar_one_or_none()
    
    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    ct.is_active = not ct.is_active
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–µ—Ä–≤–∏—Å–µ
    service = CopyTradeService()
    await service.toggle_copy_trade(ct, session)
    
    message = f"–ö–æ–ø–∏—Ç—Ä–µ–π–¥ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if ct.is_active else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}"
    await callback.answer(message)
    await show_copy_settings(callback, session) 