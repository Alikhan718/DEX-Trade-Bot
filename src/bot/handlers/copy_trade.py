import logging
import time
import traceback
import uuid

from _decimal import Decimal
from aiogram import types
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.handlers.buy import _format_price
from src.bot.utils import get_real_user_id
from src.database.models import CopyTrade, ExcludedToken, User, CopyTradeTransaction
from src.bot.services.copy_trade_service import CopyTradeService
from src.bot.states import CopyTradeStates

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "copy_trade", flags={"priority": 4})
async def show_copy_trade_menu(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await session.scalar(
        select(User).where(User.telegram_id == callback.from_user.id)
    )

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—Ç—Ä–µ–π–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(CopyTrade)
        .where(CopyTrade.user_id == user.id)
        .order_by(CopyTrade.created_at)
    )
    copy_trades = result.scalars().all()

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ø–∏—Ç—Ä–µ–π–¥—ã
    for ct in copy_trades:
        status = "‚úÖ" if ct.is_active else "üî¥"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {ct.name + ' ' if ct.name else ''}({ct.wallet_address[:6]}...)",
                callback_data=f"ct_settings:{ct.id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="ct_add")],
        [InlineKeyboardButton(text="üö´ –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="ct_exclude_tokens")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        "ü§ñ Copy Trading\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ø–∏—Ç—Ä–µ–π–¥–æ–≤: {len(copy_trades)}/20",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "ct_add")
async def start_add_copy_trade(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    count = await session.scalar(
        select(func.count(CopyTrade.id))
        .where(CopyTrade.user_id == callback.from_user.id)
    )

    if count >= 20:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∫–æ–ø–∏—Ç—Ä–µ–π–¥–æ–≤ (20)", show_alert=True)
        return

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=ForceReply(selective=True)
    )
    await state.set_state(CopyTradeStates.ENTER_ADDRESS)


async def get_copy_trade_settings_keyboard(copy_trade_id: int, session: AsyncSession):
    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    item = result.unique().scalar_one_or_none()
    if not item:
        return []
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"text": "callback_query"}
    buttons_data = [
        [
            {"üìù –ù–∞–∑–≤–∞–Ω–∏–µ": f"ct_edit:name:{item.id}"},
            {"üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞": f"ct_edit:wallet:{item.id}"}
        ],
        [{f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {_format_price(item.copy_percentage)}%": f"ct_edit:copy_percentage:{item.id}"}],
        [{f"üìâ –ú–∏–Ω. —Å—É–º–º–∞: {_format_price(item.min_amount)} SOL": f"ct_edit:min_amount:{item.id}"}],
        [{f"üìà –ú–∞–∫—Å. —Å—É–º–º–∞: {_format_price(item.max_amount) if item.max_amount else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL": f"ct_edit:max_amount:{item.id}"}],
        [{f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {_format_price(item.total_amount) if item.total_amount else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'} SOL": f"ct_edit:total_amount:{item.id}"}],
        [{
            f"üîÑ –ú–∞–∫—Å. –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞: {item.max_copies_per_token or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}": f"ct_edit:max_copies_per_token:{item.id}"}],
        [
            {f"‚ö°Ô∏è Buy Gas: {_format_price(item.buy_gas_fee / 1e9)}": f"ct_edit:buy_gas_fee:{item.id}"},
            {f"‚ö°Ô∏è Sell Gas: {_format_price(item.sell_gas_fee / 1e9)}": f"ct_edit:sell_gas_fee:{item.id}"}
        ],
        [
            {f"üìä Buy Slippage: {_format_price(item.buy_slippage)}%": f"ct_edit:buy_slippage:{item.id}"},
            {f"üìä Sell Slippage: {_format_price(item.sell_slippage)}%": f"ct_edit:sell_slippage:{item.id}"}
        ],
        [
            {f"{'‚úÖ' if item.copy_sells else '‚ùå'} –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏": f"ct_edit:copy_sells:{item.id}"},
            {f"{'‚úÖ' if item.anti_mev else '‚ùå'} Anti-MEV": f"ct_edit:anti_mev:{item.id}"}
        ],
        [{f"{'‚úÖ' if item.is_active else 'üî¥'} –ê–∫—Ç–∏–≤–Ω—ã–π": f"ct_edit:is_active:{item.id}"}],
        [{"üóë –£–¥–∞–ª–∏—Ç—å": f"ct_delete:{item.id}"}],
        [{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "copy_trade"}]
    ]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ InlineKeyboardButton
    keyboard = [
        [
            InlineKeyboardButton(
                text=list(button.keys())[0],
                callback_data=list(button.values())[0]) for button in row
        ]
        for row in buttons_data
    ]

    return keyboard


@router.callback_query(lambda c: c.data.startswith("ct_settings:"))
async def show_copy_settings(callback: CallbackQuery, session: AsyncSession, copy_trade_id = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    if copy_trade_id is None:
        copy_trade_id = int(callback.data.split(":")[1])

    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.unique().scalar_one_or_none()

    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    stmt = await session.execute(
        select(
            CopyTradeTransaction
        ).where(
            CopyTradeTransaction.copy_trade_id == copy_trade_id
        )
    )
    ctt_list = stmt.unique().scalars().all()
    print([ctt.amount_sol for ctt in ctt_list ])
    ct_pnl = Decimal(0)
    if len(ctt_list):
        ct_pnl = sum([
            Decimal(ctt.amount_sol or 0) * (Decimal(1) if ctt.transaction_type == "SELL" else Decimal(-1)) for ctt in ctt_list
        ])
    keyboard = await get_copy_trade_settings_keyboard(ct.id, session)

    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {ct.name if ct.name else '(–ù–µ –∑–∞–¥–∞–Ω–æ)'}\n" +
        f"üëõ –ö–æ—à–µ–ª–µ–∫: {ct.wallet_address[:6]}...{ct.wallet_address[-4:]}\n" +
        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if ct.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n" +
        (f"{'üìâ' if ct_pnl < 0 else 'üìà'} PNL: {_format_price(ct_pnl)} SOL\n\n" if len(ctt_list) else "") +
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(lambda c: c.data.startswith("ct_edit"))
async def handle_edit_setting(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting = callback.data.split(":")[1]
    copy_trade_id = int(callback.data.split(":")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(copy_trade_id=copy_trade_id)

    messages = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        "wallet": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:",
        "copy_percentage": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (1-100):",
        "min_amount": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ SOL:",
        "max_amount": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ SOL (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "total_amount": "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –≤ SOL (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "max_copies_per_token": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):",
        "buy_gas_fee": "–í–≤–µ–¥–∏—Ç–µ Gas Fee –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        "sell_gas_fee": "–í–≤–µ–¥–∏—Ç–µ Gas Fee –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        "buy_slippage": "–í–≤–µ–¥–∏—Ç–µ Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (%):",
        "sell_slippage": "–í–≤–µ–¥–∏—Ç–µ Slippage –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (%):"
    }

    states = {
        "name": CopyTradeStates.ENTER_NAME,
        "wallet": CopyTradeStates.ENTER_ADDRESS,
        "copy_percentage": CopyTradeStates.ENTER_PERCENTAGE,
        "min_amount": CopyTradeStates.ENTER_MIN_AMOUNT,
        "max_amount": CopyTradeStates.ENTER_MAX_AMOUNT,
        "total_amount": CopyTradeStates.ENTER_TOTAL_AMOUNT,
        "max_copies_per_token": CopyTradeStates.ENTER_MAX_COPIES,
        "buy_gas_fee": CopyTradeStates.ENTER_BUY_GAS,
        "sell_gas_fee": CopyTradeStates.ENTER_SELL_GAS,
        "buy_slippage": CopyTradeStates.ENTER_BUY_SLIPPAGE,
        "sell_slippage": CopyTradeStates.ENTER_SELL_SLIPPAGE
    }
    toggled_settings = ['copy_sells', 'is_active', 'anti_mev']

    if setting in toggled_settings:
        result = await session.execute(select(CopyTrade).where(CopyTrade.id == copy_trade_id))
        copy_trade = result.unique().scalar_one_or_none()
        if not copy_trade:
            await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        setattr(copy_trade, setting, not getattr(copy_trade, setting))
        await session.commit()
        return await show_copy_settings(callback, session, copy_trade_id)

    if setting in messages:
        await callback.message.answer(
            messages[setting],
            reply_markup=ForceReply(selective=True)
        )
        await state.set_state(states[setting])


def is_in_between(val, left, right, equal_limits=False):
    if equal_limits:
        return left <= val <= right
    return left < val < right


async def handle_copy_trade_settings_edit_base(
        attribute,
        message: types.Message, session: AsyncSession,
        state: FSMContext, retry_action
):
    data = await state.get_data()
    copy_trade_id = data.get('copy_trade_id')
    common_defaults = {
        "type": str,
        "unit": "",
        "min": 0,
        "max": 100,
        "equal_limits": True
    }

    attribute_name_dict = {
        "name": {"name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "max": 255, "equal_limits": False},
        "wallet": {"name": "–ö–æ—à–µ–ª–µ–∫", "equal_limits": False},
        "copy_percentage": {"type": float, "name": "–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "unit": "%"},
        "min_amount": {"type": float, "name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "unit": "SOL", "max": 10000},
        "max_amount": {"type": float, "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", "unit": "SOL", "max": 10000},
        "total_amount": {"type": float, "name": "–û–±—â–∞—è —Å—É–º–º–∞", "unit": "SOL", "max": 10000},
        "max_copies_per_token": {"type": int, "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π —Ç–æ–∫–µ–Ω–∞", "max": 100000},
        "buy_gas_fee": {"type": float, "name": "Gas Fee –¥–ª—è –ø–æ–∫—É–ø–∫–∏", "unit": "SOL", "equal_limits": False},
        "sell_gas_fee": {"type": float, "name": "Gas Fee –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", "unit": "SOL", "equal_limits": False},
        "buy_slippage": {"type": float, "name": "Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏", "unit": "%"},
        "sell_slippage": {"type": float, "name": "Slippage –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", "unit": "%"},
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∫–∞–∂–¥–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É
    compact_attributes = {
        key: {**common_defaults, **values}
        for key, values in attribute_name_dict.items()
    }
    attribute_name = attribute
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_res = await session.execute(select(User).where(User.telegram_id == user_id))
        user = user_res.unique().scalar_one_or_none()
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = await session.execute(
            select(CopyTrade).where(CopyTrade.id == copy_trade_id)
        )
        item = result.unique().scalar_one_or_none()
        if not item \
                or attribute not in compact_attributes \
                or item.user_id != user.id:
            await message.reply("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        attribute_info = compact_attributes.get(attribute)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        value = message.text.strip()
        attribute_type = attribute_info.get('type')
        attribute_name = attribute_info.get('name')
        attribute_unit = attribute_info.get('unit')
        attr_min = attribute_info.get('min')
        attr_max = attribute_info.get('max')
        attr_equal_limits = attribute_info.get('equal_limits')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        try:
            value = attribute_type(value)
            if attribute_type is str and \
                    (len(value) > attr_max or len(value) < attr_min):
                raise ValueError
            if attribute_type in (int, float) \
                    and not is_in_between(value, attr_min, attr_max, attr_equal_limits):
                raise ValueError
        except ValueError:
            await message.reply(
                f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {attribute_name} "
                + f"({'—Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π c ' + str(attr_min) + ' –¥–æ ' + str(attr_max) + '—Å–∏–º–≤–æ–ª–æ–≤' if attribute_type is str else f'{attr_min} - {attr_max}'})",
                reply_markup=ForceReply(selective=True))
            await state.set_state(retry_action)
            return
        if attribute in ["buy_gas_fee", "sell_gas_fee"]:
            value *= 1e9
        if attribute in ('copy_sells', 'is_active', 'anti_mev'):
            setattr(item, attribute, not getattr(item, attribute))
        else:
            setattr(item, attribute, value)
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply(f"‚úÖ {attribute_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}{attribute_unit}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = await get_copy_trade_settings_keyboard(copy_trade_id, session)
        stmt = await session.execute(
            select(
                CopyTradeTransaction
            ).where(
                CopyTradeTransaction.copy_trade_id == copy_trade_id
            )
        )
        ctt_list = stmt.unique().scalars().all()
        ct_pnl = Decimal(0)
        if len(ctt_list):
            ct_pnl = sum([
                Decimal(ctt.amount_sol or 0) * (Decimal(1) if ctt.transaction_type == "SELL" else Decimal(-1)) for ctt in ctt_list
            ])
        await message.answer(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n" +
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {item.name if item.name else '(–ù–µ –∑–∞–¥–∞–Ω–æ)'}\n" +
            f"üëõ –ö–æ—à–µ–ª–µ–∫: {item.wallet_address[:6]}...{item.wallet_address[-4:]}\n" +
            f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if item.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n" +
            (f"{'üìâ' if ct_pnl < 0 else 'üìà'} PNL: {_format_price(ct_pnl)} SOL\n\n" if len(ctt_list) else "") +
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error handling {copy_trade_id} {attribute}: {e}")
        traceback.print_exc()
        await message.reply(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {attribute_name}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ct_settings:{copy_trade_id}")]
            ])
        )


@router.message(CopyTradeStates.ENTER_NAME, flags={"priority": 5})
async def handle_ct_name(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="name",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_NAME
    )


@router.message(CopyTradeStates.ENTER_PERCENTAGE, flags={"priority": 5})
async def handle_ct_copy_percentage(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="copy_percentage",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_PERCENTAGE
    )


@router.message(CopyTradeStates.ENTER_MIN_AMOUNT, flags={"priority": 5})
async def handle_ct_min_amount(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="min_amount",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_MIN_AMOUNT
    )


@router.message(CopyTradeStates.ENTER_MAX_AMOUNT, flags={"priority": 5})
async def handle_ct_max_amount(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="max_amount",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_MAX_AMOUNT
    )


@router.message(CopyTradeStates.ENTER_TOTAL_AMOUNT, flags={"priority": 5})
async def handle_ct_total_amount(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="total_amount",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_TOTAL_AMOUNT
    )


@router.message(CopyTradeStates.ENTER_MAX_COPIES, flags={"priority": 5})
async def handle_ct_max_copies_per_token(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="max_copies_per_token",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_MAX_COPIES
    )


@router.message(CopyTradeStates.ENTER_BUY_GAS, flags={"priority": 5})
async def handle_ct_buy_gas_fee(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="buy_gas_fee",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_BUY_GAS
    )


@router.message(CopyTradeStates.ENTER_SELL_GAS, flags={"priority": 5})
async def handle_ct_sell_gas_fee(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="sell_gas_fee",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_SELL_GAS
    )


@router.message(CopyTradeStates.ENTER_BUY_SLIPPAGE, flags={"priority": 5})
async def handle_ct_buy_slippage(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="buy_slippage",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_BUY_SLIPPAGE
    )


@router.message(CopyTradeStates.ENTER_SELL_SLIPPAGE, flags={"priority": 5})
async def handle_ct_sell_slippage(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è Gas Fee"""
    return await handle_copy_trade_settings_edit_base(
        attribute="sell_slippage",
        message=message,
        session=session,
        state=state,
        retry_action=CopyTradeStates.ENTER_SELL_SLIPPAGE
    )


@router.callback_query(lambda c: c.data.startswith("ct_delete:"))
async def handle_delete_copy_trade(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞"""
    copy_trade_id = int(callback.data.split(":")[1])

    result = await session.execute(
        select(CopyTrade).where(CopyTrade.id == copy_trade_id)
    )
    ct = result.scalar_one_or_none()

    if not ct:
        await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –±–∞–∑—ã
    service = CopyTradeService()
    await service.remove_copy_trade(ct)

    await session.delete(ct)
    await session.commit()

    await callback.answer("–ö–æ–ø–∏—Ç—Ä–µ–π–¥ —É–¥–∞–ª–µ–Ω")
    await show_copy_trade_menu(callback, session)


@router.callback_query(F.data == "ct_add_excluded")
async def start_add_excluded_token(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å:",
        reply_markup=ForceReply(selective=True)
    )
    await state.set_state(CopyTradeStates.ENTER_EXCLUDED_TOKEN)


@router.message(CopyTradeStates.ENTER_EXCLUDED_TOKEN)
async def handle_excluded_token_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏—Å–∫–ª—é—á–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token_address = message.text.strip()

    if len(token_address) != 44:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=ForceReply(selective=True)
        )
        return
    telegram_id = get_real_user_id(message)
    stmt = await session.execute(
        select(User)
        .where(User.telegram_id == telegram_id)
    )
    user = stmt.unique().scalar_one_or_none()
    if not user:
        await message.reply(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
    exists = await session.scalar(
        select(ExcludedToken)
        .where(ExcludedToken.user_id == user.id)
        .where(ExcludedToken.token_address == token_address)
    )

    if exists:
        await message.reply(
            "‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    new_excluded = ExcludedToken(
        user_id=user.id,
        token_address=token_address
    )

    session.add(new_excluded)
    await session.commit()

    await state.clear()
    success_message = await message.reply(f"‚úÖ {token_address[:6]}...{token_address[-4:]} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.")

    fake_callback_query = CallbackQuery(
        id=str(uuid.uuid4())[:8],                           # –ª—é–±–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        from_user=message.from_user,            # –≤ aiogram 3 –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è from_user
        message=success_message,
        chat_instance=str(message.chat.id),     # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        data="ct_exclude_tokens"                # –∏–º–µ–Ω–Ω–æ data=..., –∞ –Ω–µ callback_data=...
    )
    await show_excluded_tokens(
        callback=fake_callback_query,
        session=session
    )


@router.callback_query(lambda c: c.data.startswith("ct_remove_excluded:"))
async def handle_remove_excluded_token(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    token_id = int(callback.data.split(":")[1])

    telegram_id = get_real_user_id(callback)
    stmt = await session.execute(
        select(User)
        .where(User.telegram_id == telegram_id)
    )
    user = stmt.unique().scalar_one_or_none()
    if not user:
        await callback.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return
    result = await session.execute(
        select(ExcludedToken)
        .where(
            ExcludedToken.id == token_id,
            ExcludedToken.user_id == user.id
        )
    )
    token = result.scalar_one_or_none()

    if not token:
        await callback.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await session.delete(token)
    await session.commit()

    await callback.answer("–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    await show_excluded_tokens(callback, session)


@router.callback_query(F.data == "ct_exclude_tokens")
async def show_excluded_tokens(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""

    telegram_id = get_real_user_id(callback)
    stmt = await session.execute(
        select(User)
        .where(User.telegram_id == telegram_id)
    )
    user = stmt.unique().scalar_one_or_none()
    if not user:
        await callback.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="ct_exclude_tokens")]
            ])
        )
        return
    result = await session.execute(
        select(ExcludedToken)
        .where(ExcludedToken.user_id == user.id)
        .order_by(ExcludedToken.created_at)
    )
    excluded_tokens = result.unique().scalars().all()

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    for token in excluded_tokens:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {token.token_address[:6]}...{token.token_address[-4:]}",
                callback_data=f"ct_remove_excluded:{token.id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="ct_add_excluded")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="copy_trade")]
    ])

    await callback.message.edit_text(
        "üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n\n"
        "–≠—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.message(CopyTradeStates.ENTER_ADDRESS)
async def handle_address_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    address = message.text.strip()

    if len(address) != 44:
        await state.set_state(CopyTradeStates.ENTER_ADDRESS)
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=ForceReply(selective=True)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await session.scalar(
        select(User).where(User.telegram_id == message.from_user.id)
    )

    if not user:
        await message.reply(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return
    if user.solana_wallet == address:
        await state.set_state(CopyTradeStates.ENTER_ADDRESS)
        await message.reply(
            "‚ùå –ù–µ–ª—å–∑—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∂–µ –∫–æ—à–µ–ª–µ–∫.",
            reply_markup=ForceReply(selective=True)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
    exists = await session.scalar(
        select(CopyTrade)
        .where(CopyTrade.user_id == user.id)
        .where(CopyTrade.wallet_address == address)
    )

    if exists:
        await message.reply(
            "‚ùå –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="copy_trade")]
            ])
        )
        return

    await state.update_data(wallet_address=address)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–ø–∏—Ç—Ä–µ–π–¥ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    data = await state.get_data()
    new_copy_trade = CopyTrade(
        user_id=user.id,
        wallet_address=address,
        is_active=True,
        copy_percentage=100.0,
        min_amount=0.0,
        max_amount=None,
        total_amount=None,
        max_copies_per_token=None,
        copy_sells=True,
        retry_count=1,
        buy_gas_fee=100000,
        sell_gas_fee=100000,
        buy_slippage=1.0,
        sell_slippage=1.0,
        anti_mev=False
    )

    session.add(new_copy_trade)
    await session.commit()
    await session.refresh(new_copy_trade)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏—Ç—Ä–µ–π–¥ –≤ —Å–µ—Ä–≤–∏—Å
    service = CopyTradeService()
    await service.add_copy_trade(new_copy_trade)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∞
    keyboard = await get_copy_trade_settings_keyboard(new_copy_trade.id, session)

    await message.reply(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Copy Trading\n\n" +
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {new_copy_trade.name if new_copy_trade.name else '(–ù–µ –∑–∞–¥–∞–Ω–æ)'} \n" +
        f"üëõ –ö–æ—à–µ–ª–µ–∫: {new_copy_trade.wallet_address[:6]}...{new_copy_trade.wallet_address[-4:]}\n" +
        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' if new_copy_trade.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω üî¥'}\n\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.clear()
