import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ForceReply, Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.database.models import User
from src.bot.states import WithdrawStates
from src.services.solana_service import SolanaService
from src.bot.utils.user import get_real_user_id
from src.bot.handlers.buy import _format_price
from solders.pubkey import Pubkey

router = Router()
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –≤—ã–≤–æ–¥–∞
withdraw_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL", callback_data="set_withdraw_amount"),
        InlineKeyboardButton(text="üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞", callback_data="set_withdraw_address")
    ],
    [InlineKeyboardButton(text="‚úÖ –í—ã–≤–µ—Å—Ç–∏", callback_data="confirm_withdraw")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
])

@router.callback_query(F.data == "withdraw", flags={"priority": 5})
async def show_withdraw_menu(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession, solana_service: SolanaService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        user_id = get_real_user_id(callback_query)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        withdraw_amount = data.get("withdraw_amount", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        withdraw_address = data.get("withdraw_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        menu_text = (
            f"üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(balance)} SOL\n\n"
            f"üìä –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {_format_price(withdraw_amount) if isinstance(withdraw_amount, (int, float)) else withdraw_amount} SOL\n"
            f"üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {withdraw_address}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback_query.message.edit_text(
            menu_text,
            reply_markup=withdraw_menu_keyboard
        )

    except Exception as e:
        logger.error(f"Error showing withdraw menu: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )

@router.callback_query(F.data == "set_withdraw_amount", flags={"priority": 5})
async def ask_withdraw_amount(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    logger.info("[WITHDRAW] Starting amount input process")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(WithdrawStates.waiting_for_amount)
    current_state = await state.get_state()
    logger.info(f"[WITHDRAW] State set to: {current_state}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply
    
    await callback_query.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É SOL –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=ForceReply(selective=True)
    )
    
    logger.info("[WITHDRAW] Sent amount input request with ForceReply")

@router.callback_query(F.data == "set_withdraw_address", flags={"priority": 5})
async def ask_withdraw_address(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    logger.info("[WITHDRAW] Starting address input process")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = await state.get_data()
    withdraw_amount = current_data.get("withdraw_amount")
    logger.info(f"[WITHDRAW] Preserved withdraw amount: {withdraw_amount}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
    
    await state.update_data(withdraw_amount=withdraw_amount)
    logger.info("[WITHDRAW] Previous state cleared, amount restored")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(WithdrawStates.waiting_for_address)
    current_state = await state.get_state()
    logger.info(f"[WITHDRAW] State set to: {current_state}")
    
    await callback_query.message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=ForceReply(selective=True)
    )
    logger.info("[WITHDRAW] Sent address input request with ForceReply")

@router.message(StateFilter(WithdrawStates.waiting_for_amount), flags={"priority": 5})
async def handle_withdraw_amount(message: Message, state: FSMContext, session: AsyncSession, solana_service: SolanaService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É"""
    logger.info("[WITHDRAW] Entering withdraw amount handler")
    logger.info(f"[WITHDRAW] Message text: {message.text}")
    logger.info(f"[WITHDRAW] Message type: {type(message)}")
    
    current_state = await state.get_state()
    logger.info(f"[WITHDRAW] Current state: {current_state}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            amount = float(message.text)
            logger.info(f"[WITHDRAW] Successfully parsed amount: {amount}")
        except ValueError:
            logger.info("[WITHDRAW] Invalid amount format")
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
                reply_markup=ForceReply(selective=True)
            )
            return

        if amount <= 0:
            logger.info("[WITHDRAW] Amount is not positive")
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è",
                reply_markup=withdraw_menu_keyboard
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_id = get_real_user_id(message)
        logger.info(f"[WITHDRAW] Processing for user {user_id}")
        
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()
        
        if not user:
            logger.error("[WITHDRAW] User not found")
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=withdraw_menu_keyboard
            )
            return
        
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        logger.info(f"[WITHDRAW] User balance: {balance}, requested amount: {amount}")
        
        if amount > balance:
            logger.info("[WITHDRAW] Insufficient funds")
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
                reply_markup=withdraw_menu_keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
        await state.update_data(withdraw_amount=amount)
        logger.info(f"[WITHDRAW] Amount {amount} saved to state")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        data = await state.get_data()
        address = data.get("withdraw_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
        
        await message.answer(
            f"‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(balance)} SOL\n"
            f"üí∞ –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {_format_price(amount)} SOL\n"
            f"üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {address}",
            reply_markup=withdraw_menu_keyboard
        )
        logger.info("[WITHDRAW] Sent confirmation message with updated menu")

    except Exception as e:
        logger.error(f"[WITHDRAW] Error processing amount: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã",
            reply_markup=withdraw_menu_keyboard
        )

@router.message(StateFilter(WithdrawStates.waiting_for_address), flags={"priority": 20})
async def handle_withdraw_address(message: Message, state: FSMContext, session: AsyncSession, solana_service: SolanaService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    logger.info(f"[WITHDRAW] Received address message: {message.text}")
    try:
        address = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        try:
            Pubkey.from_string(address)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=withdraw_menu_keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        await state.update_data(withdraw_address=address)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()
        
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        data = await state.get_data()
        amount = data.get("withdraw_amount", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        
        await message.answer(
            f"üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(balance)} SOL\n"
            f"üí∞ –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {_format_price(amount) if isinstance(amount, (int, float)) else amount}\n"
            f"üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {address}",
            reply_markup=withdraw_menu_keyboard
        )

    except Exception as e:
        logger.error(f"Error handling withdraw address: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞",
            reply_markup=withdraw_menu_keyboard
        )

def shorten_address(address: str, start_chars: int = 6, end_chars: int = 4) -> str:
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å, –æ—Å—Ç–∞–≤–ª—è—è –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü"""
    if len(address) <= start_chars + end_chars:
        return address
    return f"{address[:start_chars]}...{address[-end_chars:]}"

@router.callback_query(F.data == "confirm_withdraw", flags={"priority": 3})
async def handle_withdraw_confirm(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession, solana_service: SolanaService):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        amount = data.get("withdraw_amount")
        address = data.get("withdraw_address")

        if not amount or not address:
            await callback_query.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_id = get_real_user_id(callback_query)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()
        
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        
        if amount > balance:
            await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await callback_query.message.edit_text(
            f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã–≤–æ–¥ {_format_price(amount)} SOL –Ω–∞ –∞–¥—Ä–µ—Å {shorten_address(address)}...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        client = solana_service.create_client(user.private_key)
        signature = await client.send_transfer_transaction(
            recipient_address=address,
            amount_sol=amount,
            is_token_transfer=False,  # –≠—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ SOL, –∞ –Ω–µ —Ç–æ–∫–µ–Ω–æ–≤
        )

        if signature:
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            await callback_query.message.edit_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ {_format_price(amount)} SOL\n"
                f"üìç –ê–¥—Ä–µ—Å: {shorten_address(address)}\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Solscan](https://solscan.io/tx/{signature})",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            raise Exception("Transaction failed")

    except Exception as e:
        logger.error(f"Error confirming withdrawal: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="withdraw")]
            ])
        )

    finally:
        await state.clear() 