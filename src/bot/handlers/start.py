import traceback

import logging
from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
import uuid
from solders.keypair import Keypair
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import F

from src.bot.crud import create_initial_user_settings

from src.database.models import User
from src.services.solana_service import SolanaService
from src.bot.utils.user import get_real_user_id

router = Router()
logger = logging.getLogger(__name__)

main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    # Trading buttons
    [
        InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="buy"),
        InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")
    ],
    # Auto-buy settings
    [
        InlineKeyboardButton(text="‚ö°Ô∏è –ê–≤—Ç–æ–±–∞–π / –ê–≤—Ç–æ—Å–µ–ª–ª", callback_data="auto_buy_settings")
    ],
    # Trading features
    [
        InlineKeyboardButton(text="üë• Copy Trade", callback_data="copy_trade"),
        InlineKeyboardButton(text="üß† Smart Money", callback_data="smart_money")
    ],
    # Orders and positions
    [
        InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–µ –û—Ä–¥–µ—Ä–∞", callback_data="limit_orders"),
    ],
    # Security and wallet
    [
        InlineKeyboardButton(text="üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–∞–º", callback_data="rugcheck"),
        InlineKeyboardButton(text="üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet_menu")
    ],
    # Withdraw
    [
        InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="withdraw")
    ],
    # Settings and help
    [
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu"),
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    ],
    # Referral
    [
        InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞", callback_data="referral_menu")
    ]
])

# –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(CommandStart(), flags={"priority": 1})
async def show_main_menu(message: types.Message, session: AsyncSession, solana_service: SolanaService):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_real_user_id(message)
        logger.info(f"Processing start command for user ID: {user_id}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        args = message.text.split()
        referral_code = args[1] if len(args) > 1 else None
        # logger.info(f"Referral code: {referral_code}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user.last_activity = datetime.now()
            await session.commit()
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Solana-–∫–æ—à–µ–ª–µ–∫
            new_keypair = Keypair()
            private_key = list(bytes(new_keypair))  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª

            # –ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω)
            referrer = None
            if referral_code:
                referral_code = referral_code.replace("code_", "")
                referrer_stmt = select(User).where(User.referral_code == referral_code)
                referrer_result = await session.execute(referrer_stmt)
                referrer = referrer_result.unique().scalar_one_or_none()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                solana_wallet=str(new_keypair.pubkey()),
                private_key=str(private_key),
                referral_code=str(uuid.uuid4())[:8],  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                total_volume=0.0,
                referral_id=referrer.id if referrer else None,  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞
                created_at=datetime.now(),
                last_activity=datetime.now()
            )
            session.add(user)
            await session.commit()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if referrer:
                try:
                    message_text = f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º!"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await message.bot.send_message(referrer.telegram_id, message_text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.bot, –µ—Å–ª–∏ bot –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                except Exception as e:
                    logger.error(f"Error sending referral notification to {referrer.telegram_id}: {e}")

            logger.info(f"Created new user with wallet {user.solana_wallet} and referrer {referrer.id if referrer else 'None'}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Solana –∫–æ—à–µ–ª–µ–∫:\n\n"
                f"–ê–¥—Ä–µ—Å: <code>{user.solana_wallet}</code>\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!\n"
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏–º –Ω–∏ —Å –∫–µ–º.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.",
                parse_mode="HTML"
            )

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ü–µ–Ω—É SOL
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price

        # –°–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await create_initial_user_settings(user_id, session)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from src.bot.handlers.buy import _format_price
        await message.answer(
            f"üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(balance)} SOL (${_format_price(usd_balance)})\n"
            f"üí≥ –ê–¥—Ä–µ—Å: <code>{user.solana_wallet}</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error in start command: {e}")
        traceback.print_exc()

        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.message(Command("reset"), flags={"priority": 1})
async def reset_user_data(message: types.Message, session: AsyncSession):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
    try:
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if user:
            # Log the deletion for recovery if needed
            logger.info(f"Deleting user data for {user_id}")
            logger.info(f"Wallet address was: {user.solana_wallet}")
            logger.info(f"Private key was: {user.private_key}")

            # Delete the user
            await session.delete(user)
            await session.commit()

            await message.answer(
                "üóë –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error resetting user data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ç–æ–∂–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç


@router.callback_query(F.data == "main_menu", flags={"priority": 1})
async def back_to_main_menu(callback_query: types.CallbackQuery, session: AsyncSession, solana_service: SolanaService,
                            state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = get_real_user_id(callback_query)
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å eager loading
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()
        await state.clear()

        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Get wallet balance and SOL price
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price
        from src.bot.handlers.buy import _format_price
        await callback_query.message.edit_text(
            f"üí≥ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(balance)} SOL (${_format_price(usd_balance)})\n"
            f"üí≥ –ê–¥—Ä–µ—Å: <code>{user.solana_wallet}</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error returning to main menu: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
