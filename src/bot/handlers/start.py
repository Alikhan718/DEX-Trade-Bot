import logging
import uuid
from datetime import datetime

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ...database.models import User
from ...services.solana import SolanaService
from solders.keypair import Keypair

logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("start"))
async def show_main_menu(message: types.Message, session, solana_service: SolanaService):
    """Show main menu with wallet info"""
    try:
        user = session.query(User).filter(
            User.telegram_id == message.from_user.id
        ).first()
        
        if not user:
            # Generate new Solana wallet for new user
            new_keypair = Keypair()
            # Store private key as a list of integers
            private_key = list(bytes(new_keypair))
            
            user = User(
                telegram_id=message.from_user.id,
                solana_wallet=str(new_keypair.pubkey()),
                private_key=str(private_key),  # Store as string representation of the array
                referral_code=str(uuid.uuid4())[:8],
                total_volume=0.0,
                created_at=datetime.now(),
                last_activity=datetime.now()
            )
            session.add(user)
            session.commit()
            logger.info(f"Created new wallet for user {message.from_user.id}: {user.solana_wallet}")
            
            # Send welcome message for new users
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Solana –∫–æ—à–µ–ª–µ–∫:\n\n"
                f"–ê–¥—Ä–µ—Å: <code>{user.solana_wallet}</code>\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!\n"
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏–º –Ω–∏ —Å –∫–µ–º.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á¬ª —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.",
                parse_mode="HTML"
            )
        
        # Update last activity
        user.last_activity = datetime.now()
        session.commit()
        
        # Get wallet balance and SOL price
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # Trading buttons
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="buy"),
                InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")
            ],
            # Trading features
            [
                InlineKeyboardButton(text="üë• Copy Trade", callback_data="copy_trade"),
                InlineKeyboardButton(text="üß† Smart Wallet", callback_data="smart_money")
            ],
            # Orders and positions
            [
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–µ –û—Ä–¥–µ—Ä–∞", callback_data="limit_orders"),
                InlineKeyboardButton(text="üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ü–æ–∑–∏—Ü–∏–∏", callback_data="open_positions")
            ],
            # Wallet and settings
            [
                InlineKeyboardButton(text="üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet_menu"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            # Help and referral
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞", callback_data="referral")
            ]
        ])
        
        await message.answer(
            f"üí≥ –í–∞—à –∫–æ—à–µ–ª–µ–∫: <code>{user.solana_wallet}</code>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.4f} SOL (${usd_balance:.2f})\n\n"
            "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SOL –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

@router.message(Command("reset"))
async def reset_user_data(message: types.Message, session):
    """Delete user data from database for testing"""
    try:
        user = session.query(User).filter(
            User.telegram_id == message.from_user.id
        ).first()
        
        if user:
            # Log the deletion for recovery if needed
            logger.info(f"Deleting user data for {message.from_user.id}")
            logger.info(f"Wallet address was: {user.solana_wallet}")
            logger.info(f"Private key was: {user.private_key}")
            
            # Delete the user
            session.delete(user)
            session.commit()
            
            await message.answer(
                "üóë –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Error resetting user data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(lambda c: c.data == "main_menu")
async def on_main_menu_button(callback_query: types.CallbackQuery, session, solana_service: SolanaService):
    """Handle main menu button press"""
    await callback_query.answer()
    await show_main_menu(callback_query.message, session, solana_service) 