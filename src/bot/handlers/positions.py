from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.bot.utils.user import get_real_user_id
from src.database.models import User
from src.solana_module.transaction_handler import UserTransactionHandler
from src.services.token_info import TokenInfoService
from src.bot.handlers.buy import _format_price
import logging
import traceback

router = Router()
logger = logging.getLogger(__name__)
token_info_service = TokenInfoService()


async def format_token_info(token_address: str, balance: float, token_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    token_value_usd = balance * token_info.price_usd
    return (
        f"üíé {token_info.symbol} ({token_info.name})\n"
        f"‚îî –ë–∞–ª–∞–Ω—Å: {_format_price(balance)} ({_format_price(token_value_usd)}$)\n"
        f"‚îî –¶–µ–Ω–∞: ${_format_price(token_info.price_usd)}\n"
        f"‚îî Market Cap: ${_format_price(token_info.market_cap)}\n"
        f"‚îî Renounced: {'‚úÖ' if token_info.is_renounced else '‚ùå'}\n"
        f"‚îî Burnt: {'‚úÖ' if token_info.is_burnt else '‚ùå'}\n"
        f"‚îî –ê–¥—Ä–µ—Å: `{token_address}`\n"
    )

@router.callback_query(F.data == "open_positions")
async def show_positions(callback_query: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = get_real_user_id(callback_query)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        tx_handler = UserTransactionHandler(user.private_key, 10000000)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å SOL
            sol_balance = await tx_handler.client.get_sol_balance(user.solana_wallet)
            sol_info = await token_info_service.get_token_info('So11111111111111111111111111111111111111112')
            sol_balance_usd = sol_balance * sol_info.price_usd

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tokens = await tx_handler.client.get_tokens(user.solana_wallet, tx_handler)
            
            if not tokens:
                await callback_query.message.edit_text(
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {_format_price(sol_balance)} SOL (${_format_price(sol_balance_usd)})\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ])
                )
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_value_usd = sol_balance_usd
            tokens_info = []
            
            for token_address, market_cap, name, symbol, balance in tokens:
                token_info = await token_info_service.get_token_info(token_address)
                if token_info:
                    token_value_usd = balance * token_info.price_usd
                    total_value_usd += token_value_usd
                    tokens_info.append((token_address, balance, token_info, token_value_usd))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å SOL: {_format_price(sol_balance)} (${_format_price(sol_balance_usd)})\n"
                f"üìà –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${_format_price(total_value_usd)}\n\n"
                f"üî∑ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–æ–∫–µ–Ω–µ
            for token_address, balance, token_info, token_value_usd in tokens_info:
                message_text += await format_token_info(token_address, balance, token_info) + "\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            keyboard = []
            for token_address, _, token_info, _ in tokens_info:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"–ü—Ä–æ–¥–∞—Ç—å {token_info.symbol}",
                        callback_data=f"select_token_{token_address}"
                    )
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

            await callback_query.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="MARKDOWN"
            )
        except Exception as e:
            logger.error(f"Error processing wallet data: {str(e)}")
            traceback.print_exc()
            await callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )

    except Exception as e:
        logger.error(f"Error showing positions: {str(e)}")
        traceback.print_exc()
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        ) 