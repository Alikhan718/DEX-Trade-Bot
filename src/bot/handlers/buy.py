import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ...services.solana import SolanaService
from ...services.token_info import TokenInfoService
from ...database.models import User
from .start import get_real_user_id

logger = logging.getLogger(__name__)

router = Router()
token_info_service = TokenInfoService()

class BuyStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_amount = State()
    waiting_for_slippage = State()

def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        if len(address) != 44:
            return False
        valid_chars = set("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
        return all(c in valid_chars for c in address)
    except Exception:
        return False

def _format_price(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if amount >= 1_000_000:
        return f"{amount/1_000_000:.2f}M"
    elif amount >= 1_000:
        return f"{amount/1_000:.1f}K"
    else:
        return f"{amount:.2f}"

@router.callback_query(lambda c: c.data == "buy")
async def on_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        await callback_query.message.edit_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
            parse_mode="MARKDOWN",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.set_state(BuyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in buy button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(BuyStates.waiting_for_token)
async def handle_token_input(message: types.Message, state: FSMContext, session, solana_service: SolanaService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        token_address = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = get_real_user_id(message)
        user = session.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = await token_info_service.get_token_info(token_address)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
            [
                InlineKeyboardButton(text="0.2 SOL", callback_data="buy_0.2"),
                InlineKeyboardButton(text="0.5 SOL", callback_data="buy_0.5"),
                InlineKeyboardButton(text="1 SOL", callback_data="buy_1.0")
            ],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL", callback_data="custom_amount")],
            # Slippage
            [InlineKeyboardButton(text="‚öôÔ∏è Slippage: 1%", callback_data="set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
            f"‚Ä¢ SOL Balance: {balance:.4f} SOL (${usd_balance:.2f})\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        await message.reply(
            message_text,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True,
            reply_markup=keyboard
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing token address: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        await state.clear() 