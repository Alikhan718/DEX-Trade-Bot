import traceback
from datetime import datetime

import logging
from decimal import Decimal
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import re
from typing import Union
from aiogram.filters import StateFilter

from src.services.solana_service import SolanaService
from src.services.token_info import TokenInfoService
from src.database.models import User, LimitOrder, Trade, TransactionType
from .start import get_real_user_id
from src.solana_module.transaction_handler import UserTransactionHandler
from src.bot.states import BuyStates, AutoBuySettingsStates, LimitBuyStates
from solders.pubkey import Pubkey
from src.solana_module.utils import get_bonding_curve_address
from ..crud import get_user_setting, update_user_setting
#from bot import bot


logger = logging.getLogger(__name__)

router = Router()
token_info_service = TokenInfoService()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è mint –∞–¥—Ä–µ—Å–∞
MINT_ADDRESS_PATTERN = r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{44}$'


def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        return bool(re.match(MINT_ADDRESS_PATTERN, address))
    except Exception:
        logger.error(f"Invalid token address: {address}")
        return False


def _format_price(amount, format_length=2) -> str:
    def decimal_to_plain_string(exp_str: str) -> str:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: '3.0145939853849426E-8')
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –æ–±—ã—á–Ω–æ–º –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ –±–µ–∑ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã.
        """
        d = Decimal(exp_str)  # —Å–æ–∑–¥–∞—ë–º Decimal –∏–∑ —Å—Ç—Ä–æ–∫–∏

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–Ω—É—Ç—Ä–∏ Decimal:
        # sign = 0 –∏–ª–∏ 1, digits = –∫–æ—Ä—Ç–µ–∂ —Ü–∏—Ñ—Ä, exponent = —Ü–µ–ª–æ–µ (–∫—É–¥–∞ —Å–¥–≤–∏–Ω—É—Ç–∞ –∑–∞–ø—è—Ç–∞—è)
        sign, digits, exponent = d.as_tuple()

        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Ü–∏—Ñ—Ä –≤ —Å—Ç—Ä–æ–∫—É.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, digits = (3, 0, 1, 4, ...) => "3014..."
        digits_str = "".join(str(dig) for dig in digits)

        # –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "0", –∑–Ω–∞—á–∏—Ç —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 0:
        if all(dig == 0 for dig in digits):
            # –£—á–∏—Ç—ã–≤–∞—è –∑–Ω–∞–∫, —ç—Ç–æ –±—É–¥–µ—Ç –ª–∏–±–æ '0', –ª–∏–±–æ '-0'
            # –ù–æ –æ–±—ã—á–Ω–æ '-0' –º—ã –Ω–µ –ª—é–±–∏–º. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —É–±–µ—Ä–∏ [:-1].
            return "-0" if sign else "0"

        # –ü–æ–∑–∏—Ü–∏—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ digits_str
        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —É –Ω–∞—Å exponent = -8 –∏ digits_str = "30145939853849426",
        # —Ç–æ int_position = len(digits_str) + exponent = 17 + (-8) = 9
        int_position = len(digits_str) + exponent

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞–∫
        result_sign = "-" if sign else ""

        if int_position <= 0:
            # –í—Å–µ —Ü–∏—Ñ—Ä—ã "—É—à–ª–∏" –≤–ø—Ä–∞–≤–æ –æ—Ç –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏,
            # –∑–Ω–∞—á–∏—Ç —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "0."
            # –ü—Ä–∏–º–µ—Ä: int_position = -2, digits_str = "30145" => 0.0030145...
            # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å |int_position| –Ω—É–ª–µ–π –ø–æ—Å–ª–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏
            zeros_needed = abs(int_position)
            result = result_sign + "0." + ("0" * (zeros_needed)) + digits_str
        elif int_position >= len(digits_str):
            # –í—Å–µ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ —Ü–µ–ª–∞—è —á–∞—Å—Ç—å, –¥—Ä–æ–±–Ω–æ–π –Ω–µ—Ç, –∏–ª–∏ –µ—ë –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω—É–ª—è–º–∏
            # –ü—Ä–∏–º–µ—Ä: int_position = 6, digits_str = "12345" => –Ω–∞–¥–æ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É "0" –≤ –∫–æ–Ω–µ—Ü
            zeros_needed = int_position - len(digits_str)
            result = result_sign + digits_str + ("0" * zeros_needed)
        else:
            # –ß–∞—Å—Ç—å —Ü–∏—Ñ—Ä ‚Äî —Ü–µ–ª–∞—è, —á–∞—Å—Ç—å ‚Äî –¥—Ä–æ–±–Ω–∞—è
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É digits_str –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
            # –ü—Ä–∏–º–µ—Ä: digits_str = "30145939853849426", int_position = 1 => "3.0145939853849426"
            result = (
                result_sign
                + digits_str[:int_position]
                + "."
                + digits_str[int_position:]
            )

        return result
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏"""
    amount = Decimal(str(amount))
    # –Æ–Ω–∏–∫–æ–¥ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–∏—Ñ—Ä
    small_digits = {
        '0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ',
        '5': '‚ÇÖ', '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ'
    }

    def to_small_and_normal_digits(number: Decimal, digits=2) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –Ω—É–ª–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–∏—Ñ—Ä—ã, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞ –æ–±—ã—á–Ω—ã–µ"""
        number = decimal_to_plain_string(str(number))
        parts = str(number).split('.')
        int_part = parts[0]
        frac_part = parts[1] if len(parts) > 1 else ''
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π –≤ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
        leading_zeros = len(frac_part) - len(frac_part.lstrip('0'))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç—Ç–∏ –Ω—É–ª–∏ –≤ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 6 –Ω—É–ª–µ–π
        if leading_zeros > 2:
            frac_part_small = ''.join(small_digits[digit] for digit in str(leading_zeros))
        else:
            frac_part_small = ''.join('0' for _ in range(leading_zeros))

        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã ‚Äî –æ–±—ã—á–Ω—ã–µ
        frac_part_normal = frac_part[leading_zeros:(leading_zeros + 5)]
        return f"{int_part}{'.' if frac_part_normal else ''}{frac_part_small}{frac_part_normal}"

    if amount >= 1_000_000:
        return f"{amount / 1_000_000:.{format_length}f}M"
    elif amount >= 1_000:
        return f"{amount / 1_000:.1f}K"
    elif amount < 1 and amount != 0:
        return to_small_and_normal_digits(amount, format_length)
    else:
        return f"{amount:.{format_length}f}"



@router.callback_query(F.data == "buy", flags={"priority": 3})
async def on_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        await callback_query.message.answer(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
            parse_mode="MARKDOWN",
            reply_markup=ForceReply(selective=True)
        )
        await state.set_state(BuyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in buy button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def get_sol_update_keyboard(state: FSMContext, prefix="buy"):
    data = await state.get_data()
    is_limit_order = data.get("is_limit_order", False)
    chosen_amount = data.get("amount_sol", None)
    gas_fee = data.get("gas_fee", None)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
    keyboard.append([
        InlineKeyboardButton(
            text="üü¢ –ö—É–ø–∏—Ç—å" if not is_limit_order else "‚ö™Ô∏è –ö—É–ø–∏—Ç—å",
            callback_data="market_buy"
        ),
        InlineKeyboardButton(
            text="üü¢ –õ–∏–º–∏—Ç–Ω—ã–π" if is_limit_order else "‚ö™Ô∏è –õ–∏–º–∏—Ç–Ω—ã–π",
            callback_data="limit_buy"
        )
    ])

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
    keyboard.extend([
        [
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if chosen_amount == 0.002 else ''} 0.002 SOL",
                                 callback_data=f"{prefix}_0.002"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if chosen_amount == 0.005 else ''} 0.005 SOL",
                                 callback_data=f"{prefix}_0.005"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if chosen_amount == 0.01 else ''} 0.01 SOL",
                                 callback_data=f"{prefix}_0.01")
        ],
        [
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if chosen_amount == 0.02 else ''} 0.02 SOL",
                                 callback_data=f"{prefix}_0.02"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if chosen_amount == 0.1 else ''} 0.1 SOL", callback_data=f"{prefix}_0.1"),
            InlineKeyboardButton(
                text=f"{'‚úÖÔ∏è ' + str(_format_price(chosen_amount)) if chosen_amount and chosen_amount not in [0.002, 0.005, 0.01, 0.02, 0.1] else ''} Custom",
                callback_data=f"{prefix}_custom")
        ],
        [
            InlineKeyboardButton(
                text=f"üöÄ Gas Fee {': ' + _format_price(gas_fee / 1e9) + ' SOL' if gas_fee else ''}",
                callback_data=f"{prefix}_set_gas_fee"
            )
        ]
    ])
    return keyboard


@router.message(BuyStates.waiting_for_token, flags={"priority": 3})
async def handle_token_input(message: types.Message, state: FSMContext, session: AsyncSession,
                             solana_service: SolanaService):
    """Handle token address input"""
    try:
        token_address = message.text.strip()

        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return

        # Get user info
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return

        # Get wallet balance
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price
        settings = await get_user_setting(user_id, 'buy', session)
        # Save token address and initial slippage to state
        await state.update_data({
            'token_address': token_address,
            'slippage': settings['slippage'] if 'slippage' in settings else 1.0,
            'gas_fee': settings['gas_fee'] if 'gas_fee' in settings else None,
            'balance': balance,
            'sol_price': sol_price,
            'usd_balance': usd_balance,
        })

        # Get current slippage from state
        data = await state.get_data()
        slippage = data.get('slippage', 1.0)  # Default to 1% if not set

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await get_sol_update_keyboard(
            state=state,
            prefix="buy"
        )
        keyboard.append(
            [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="buy_set_slippage")],
        )
        keyboard.append(
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")]
        )
        keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üí≤{token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
            f"‚Ä¢ SOL Balance: {_format_price(balance)} SOL (${_format_price(usd_balance)})\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úîÔ∏è' if token_info.is_renounced else '‚úñÔ∏è'} "
            f"Burnt: {'‚úîÔ∏è' if token_info.is_burnt else '‚úñÔ∏è'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        await message.answer(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )

    except Exception as e:
        traceback.print_exc()
        logger.error(f"Error processing token address: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )


@router.callback_query(lambda c: c.data == "confirm_buy", flags={"priority": 3})
async def handle_confirm_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle buy confirmation"""
    try:
        # Get user data
        user_id = get_real_user_id(callback_query)
        logger.info(f"Processing buy confirmation for user: {user_id}")

        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            logger.error(f"User not found: {user_id}")
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Get state data
        data = await state.get_data()
        token_address = data.get("token_address")
        amount_sol = data.get("amount_sol", 0.0)
        slippage = data.get("slippage", 1.0)
        is_limit_order = data.get("is_limit_order", False)
        trigger_price_percent = data.get("trigger_price_percent")

        logger.info(f"Buy parameters - Token: {token_address}, Amount: {amount_sol} SOL, Slippage: {slippage}%")

        if not token_address or not amount_sol:
            logger.error("Missing token address or amount")
            await callback_query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å—É–º–º–∞")
            return
        token_info = await token_info_service.get_token_info(token_address)
        if is_limit_order:
            if not trigger_price_percent:
                logger.error("Missing trigger price for limit order")
                await callback_query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
                return

            # Get current token price
            if not token_info:
                logger.error("Failed to get token info")
                await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ")
                return

            # Calculate trigger price in USD
            trigger_price_usd = token_info.price_usd * (1 + (trigger_price_percent / 100))

            # Create limit order
            limit_order = LimitOrder(
                user_id=user.id,
                token_address=token_address,
                order_type='buy',
                amount_sol=amount_sol,
                trigger_price_usd=trigger_price_usd,
                trigger_price_percent=trigger_price_percent,
                slippage=slippage,
                status='active'
            )
            session.add(limit_order)
            await session.commit()
    
            
            # Send confirmation message
            await callback_query.message.edit_text(
                "‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞: {_format_price(amount_sol)} SOL\n"
                f"üìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {trigger_price_percent}% (${_format_price(trigger_price_usd)})\n"
                f"‚öôÔ∏è Slippage: {slippage}%\n\n"
                "–û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # Regular market buy...
        # Initialize transaction handler with user's private key
        try:
            buy_settings = await get_user_setting(user_id, 'buy', session)
            logger.info("Initializing transaction handler")
            tx_handler = UserTransactionHandler(user.private_key, buy_settings['gas_fee'])
        except ValueError:
            logger.error("Failed to initialize transaction handler")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞")
            return

        # Send status message
        status_message = await callback_query.message.answer(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
        )
        token_info = await token_info_service.get_token_info(token_address)
        sol_price_usd = await token_info_service.get_token_info('So11111111111111111111111111111111111111112')
        # Get token price before transaction
        token_price_sol = token_info.price_usd / sol_price_usd.price_usd

        # Execute buy transaction
        logger.info("Executing buy transaction")
        tx_signature = await tx_handler.buy_token(
            token_address=token_address,
            amount_sol=amount_sol,
            slippage=slippage
        )

        if tx_signature:
            logger.info(f"Buy transaction successful: {tx_signature}")

            # Calculate token amount from SOL amount and price
            token_amount = amount_sol / token_price_sol

            # Update success message
            await status_message.edit_text(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {_format_price(amount_sol)} SOL\n"
                f"üìà –ü–æ–ª—É—á–µ–Ω–æ: {_format_price(token_amount)} —Ç–æ–∫–µ–Ω–æ–≤\n"
                f"üíµ –¶–µ–Ω–∞: {_format_price(token_price_sol)} SOL {'($' + _format_price(token_info.price_usd) + ')' if token_info and token_info.price_usd else ''}\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Explorer](https://solscan.io/tx/{tx_signature})",
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            trade = Trade(
                user_id=user.id,
                token_address=token_address,
                amount=token_amount,
                price_usd=token_info.price_usd if token_info and token_info.price_usd else -1.0,
                amount_sol=amount_sol,
                created_at=datetime.now(),
                transaction_type=0,
                status="SUCCESS",
                gas_fee=buy_settings['gas_fee'],
                transaction_hash=str(tx_signature),
            )
            session.add(trade)
            await session.commit()
        else:
            logger.error("Buy transaction failed")
            # Update error message
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

        # Clear state
        await state.clear()

    except Exception as e:
        logger.error(f"Error confirming buy: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


async def get_slippage_update_keyboard(state: FSMContext, prefix="buy", back_callback="back_to_buy"):
    data = await state.get_data()
    chosen_slippage = float(data.get('slippage', -1))
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if 0.1 == chosen_slippage else ''} 0.1%",
                                 callback_data=f"{prefix}_slippage_0.5"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if 1 == chosen_slippage else ''} 1%",
                                 callback_data=f"{prefix}_slippage_1"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if 2 == chosen_slippage else ''} 2%",
                                 callback_data=f"{prefix}_slippage_2")
        ],
        [
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if 3 == chosen_slippage else ''} 3%",
                                 callback_data=f"{prefix}_slippage_3"),
            InlineKeyboardButton(text=f"{'‚úÖÔ∏è' if 5 == chosen_slippage else ''} 5%",
                                 callback_data=f"{prefix}_slippage_5"),
            InlineKeyboardButton(
                text=f"{('‚úÖÔ∏è ' + str(_format_price(chosen_slippage)) + '%') if chosen_slippage not in [0.1, 1, 2, 3, 5, -1] else ''} Custom",
                callback_data=f"{prefix}_slippage_custom")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ])


@router.callback_query(lambda c: c.data == "buy_set_slippage", flags={"priority": 10})
async def handle_set_slippage(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle slippage setting button"""
    try:
        # Get current data to verify we're in buy context
        data = await state.get_data()

        if not data.get("token_address"):
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω")
            return

        # Save buy context
        await state.update_data(menu_type="buy")
        keyboard = await get_slippage_update_keyboard(
            state=state,
            prefix="buy",
            back_callback="back_to_buy"
        )

        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã:\n"
            "‚Ä¢ –ß–µ–º –≤—ã—à–µ slippage, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ –ß–µ–º –Ω–∏–∂–µ slippage, —Ç–µ–º –ª—É—á—à–µ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1-2%",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in set_slippage handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("buy_slippage_"), flags={"priority": 10})
async def handle_slippage_choice(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle slippage choice"""
    try:
        # Verify we're in buy context
        data = await state.get_data()

        if data.get("menu_type") != "buy":
            return

        choice = callback_query.data.split("_")[2]  # buy_slippage_X -> X

        if choice == "custom":
            await callback_query.message.answer(
                "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):",
                reply_markup=ForceReply(selective=True)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.set_state(BuyStates.waiting_for_slippage)
            return

        # Convert choice to float and save to state
        slippage = float(choice)
        user_id = get_real_user_id(callback_query)

        buy_setting = await get_user_setting(user_id, 'buy', session)
        buy_setting['slippage'] = slippage
        await update_user_setting(user_id, 'buy', buy_setting, session)
        await state.update_data(slippage=slippage)
        await show_buy_menu(callback_query.message, state, session, callback_query.from_user.id)

    except Exception as e:
        logger.error(f"Error handling slippage choice: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(BuyStates.waiting_for_slippage)
async def handle_custom_slippage(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle custom slippage input"""
    try:
        slippage = float(callback_query.text.replace(",", "."))
        if slippage <= 0 or slippage > 100:
            raise ValueError("Invalid slippage value")

        user_id = get_real_user_id(callback_query)

        buy_setting = await get_user_setting(user_id, 'buy', session)
        buy_setting['slippage'] = slippage
        await update_user_setting(user_id, 'buy', buy_setting, session)
        await state.update_data(slippage=slippage)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        status_message = await callback_query.answer(f"‚úÖ Slippage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {slippage}%")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        await show_buy_menu(status_message, state, session, callback_query.from_user.id)

    except ValueError:
        await callback_query.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 100:",
            reply_markup=ForceReply(selective=True)
        )


@router.callback_query(lambda c: c.data.startswith("buy_set_gas_fee"), flags={"priority": 11})
async def handle_set_gas_fee(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle gas fee"""
    try:
        await callback_query.message.answer(
            "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Gas Fee –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ SOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01):",
            reply_markup=ForceReply(selective=True)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.set_state(BuyStates.waiting_for_gas_fee)
        return


    except Exception as e:
        logger.error(f"Error handling gas_fee: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(BuyStates.waiting_for_gas_fee)
async def handle_custom_gas_fee(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle custom slippage input"""
    try:
        gas_fee = float(callback_query.text.replace(",", "."))
        if gas_fee <= 0 or gas_fee > 10:
            raise ValueError("Invalid gas_fee value")
        gas_fee *= 1e9
        user_id = get_real_user_id(callback_query)

        buy_setting = await get_user_setting(user_id, 'buy', session)
        buy_setting['gas_fee'] = gas_fee
        await update_user_setting(user_id, 'buy', buy_setting, session)
        await state.update_data(gas_fee=gas_fee)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        status_message = await callback_query.answer(f"‚úÖ Gas Fee —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {_format_price(gas_fee / 1e9)} SOL")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        await show_buy_menu(status_message, state, session, callback_query.from_user.id)

    except ValueError as e:
        logger.error(f"[BUY] Invalid gas_fee value: {e}")
        await callback_query.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:",
            reply_markup=ForceReply(selective=True)
        )


@router.callback_query(lambda c: c.data == "back_to_buy", flags={"priority": 10})
async def handle_back_to_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Return to buy menu"""
    logger.info("[BUY] Handling back_to_buy")
    data = await state.get_data()
    logger.info(f"[BUY] Current state data: {data}")
    await show_buy_menu(callback_query.message, state, session, callback_query.from_user.id)
    logger.info("[BUY] Showed buy menu")


@router.callback_query(lambda c: c.data == "limit_buy", flags={"priority": 3})
async def handle_limit_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(is_limit_order=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        logger.info("[BUY] Showed buy menu with limit order")
        await show_buy_menu(callback_query.message, state, session, callback_query.from_user.id)
    except Exception as e:
        logger.error(f"Error handling limit buy: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data == "market_buy", flags={"priority": 3})
async def handle_market_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(is_limit_order=False)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        logger.info("[BUY] Showed buy menu")
        await show_buy_menu(callback_query.message, state, session, callback_query.from_user.id)
    except Exception as e:
        logger.error(f"Error handling buy: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_buy_menu(message: types.Message, state: FSMContext, session: AsyncSession, user_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏"""
    try:

        # Get current data
        user_id = user_id if user_id else message.from_user.id
        settings = await get_user_setting(user_id, 'buy', session)
        data = await state.get_data()
        token_address = data.get("token_address")
        amount_sol = data.get("amount_sol")
        slippage = settings["slippage"]
        is_limit_order = data.get("is_limit_order", False)
        trigger_price_percent = data.get("trigger_price_percent", 20)
        logger.info(f"[BUY] Current state data: {data}")

        if not token_address:
            await message.edit_text(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        print(f"is_limit_order: {is_limit_order}")
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_id:
            user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return

        # Get wallet balance
        balance = data.get('balance')
        sol_price = data.get('sol_price')
        usd_balance = data.get('usd_balance')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await get_sol_update_keyboard(
            state=state,
            prefix='buy'
        )
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.append([InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="buy_set_slippage")])

        # –î–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã
        print(f"is_limit_order: {is_limit_order}")
        if is_limit_order:
            trigger_price_text = f"üíµ Trigger Price: {trigger_price_percent}%" if trigger_price_percent else "üíµ Set Trigger Price"
            if trigger_price_percent:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                trigger_price_usd = token_info.price_usd * (1 + (trigger_price_percent / 100))
                trigger_price_usd = format(trigger_price_usd, '.6f')
                trigger_price_text += f" (${_format_price(trigger_price_usd)})"
            keyboard.append([InlineKeyboardButton(text=trigger_price_text, callback_data="set_trigger_price")])

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(
                text="üìù –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä" if is_limit_order else "üí∞ –ö—É–ø–∏—Ç—å",
                callback_data="confirm_buy"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

        if is_limit_order:
            trigger_price_usd = format(token_info.price_usd * (1 + (trigger_price_percent / 100)), '.6f')
            addiction = (f"‚öôÔ∏è Slippage: {slippage}%\n" if slippage else "") + (
                f"üíµ Trigger Price: {trigger_price_percent}% (${_format_price(trigger_price_usd)})\n" if trigger_price_percent else "")
        else:
            addiction = ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
                f"üí≤{token_info.symbol} üìà - {token_info.name}\n\n"
                f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
                f"‚Ä¢ SOL Balance: {_format_price(balance)} SOL (${_format_price(usd_balance)})\n\n"
                + (f"üí∞ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {_format_price(amount_sol)} SOL\n" if amount_sol else "")
                + addiction
                + f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
                + f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
                + f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
                + f"‚Ä¢ Renounced: {'‚úîÔ∏è' if token_info.is_renounced else '‚úñÔ∏è'} "
                + f"Burnt: {'‚úîÔ∏è' if token_info.is_burnt else '‚úñÔ∏è'}\n\n"
                + f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = message.message if hasattr(message, 'message') else message
        await message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )

    except Exception as e:
        traceback.print_exc()
        logger.error(f"Error showing buy menu: {e}")
        await message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )


@router.callback_query(lambda c: c.data == "set_trigger_price", flags={"priority": 3})
async def handle_set_trigger_price(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        await state.set_state(BuyStates.waiting_for_trigger_price)
        await callback_query.message.answer(
            "üíµ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ 10 - –æ—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 10%\n"
            "‚Ä¢ -5 - –æ—Ä–¥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –Ω–∞ 5%",
            reply_markup=ForceReply(selective=True)
        )
        return
    except Exception as e:
        logger.error(f"Error setting trigger price: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(BuyStates.waiting_for_trigger_price)
async def handle_trigger_price_input(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            trigger_price = float(message.text.replace(',', '.').strip())
        except ValueError:
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")]
                ])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(trigger_price_percent=trigger_price)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        status_message = await message.reply(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {trigger_price}%")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        await show_buy_menu(status_message, state, session, user_id)

    except Exception as e:
        logger.error(f"Error handling trigger price input: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")]
            ])
        )


@router.message(BuyStates.waiting_for_amount)
async def handle_custom_amount(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle custom percentage input"""
    try:
        amount = float(callback_query.text.replace(",", "."))
        if amount < 0:
            raise ValueError("Invalid amount value")
        await state.update_data(amount_sol=amount)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        status_message = await callback_query.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {amount} SOL")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏
        await show_buy_menu(status_message, state, session, callback_query.from_user.id)

    except ValueError:
        await callback_query.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")]
            ])
        )


@router.callback_query(lambda c: c.data.startswith("buy"))
async def handle_preset_amount(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle preset amount buttons"""
    try:
        # Extract amount from callback data
        amount = callback_query.data.split('_')[1]
        if amount == "custom":
            await callback_query.message.answer(
                "‚öôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.23):",
                reply_markup=ForceReply(selective=True)
            )
            await state.set_state(BuyStates.waiting_for_amount)
            return
        amount = float(amount)
        prev_amount = await state.get_value('amount_sol', -1)
        if amount == float(prev_amount):
            return
        await state.update_data(amount_sol=amount)

        await show_buy_menu(callback_query.message, state, session, callback_query.from_user.id)

    except Exception as e:
        logger.error(f"Error handling preset amount: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data == "limit_buy", flags={"priority": 3})
async def on_limit_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–õ–∏–º–∏—Ç–Ω—ã–π" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
    """
    try:
        # –û—á–∏—â–∞–µ–º/–æ–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await state.update_data({
            "trigger_price": 0.0,
            "limit_amount_sol": 0.0,
            "limit_slippage": 1.0,
            "gas_fee": 50000,
            "menu_type": 'buy',
            "action_type": 'buy'
        })
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ "idle" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (–ª–∏–±–æ –º–æ–∂–Ω–æ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å)
        await state.set_state(LimitBuyStates.idle)

        await show_limit_buy_menu(callback_query.message, state, edit=True)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error on_limit_buy_button: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_limit_buy_menu(
    message: types.Message,
    state: FSMContext,
    edit: bool = False
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã, —Å—É–º–º–∞ SOL, slippage, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).
    –ü–∞—Ä–∞–º–µ—Ç—Ä edit=True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    data = await state.get_data()
    trigger_price = data.get("trigger_price", 0.0)
    limit_amount_sol = data.get("limit_amount_sol", 0.0)
    limit_slippage = data.get("limit_slippage", 1.0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚öôÔ∏è –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã: {trigger_price or 0} USD",
                callback_data="limit_buy_set_trigger_price"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üí∞ –°—É–º–º–∞: {limit_amount_sol or 0} SOL",
                callback_data="limit_buy_set_amount_sol"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üõ† Slippage: {limit_slippage}%",
                callback_data="limit_buy_set_slippage"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä",
                callback_data="limit_buy_confirm"
            )
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")
        ]
    ])

    text = (
        "üìä *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞*\n\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã (USD): `{trigger_price}`\n"
        f"‚Ä¢ –°—É–º–º–∞ (SOL): `{limit_amount_sol}`\n"
        f"‚Ä¢ Slippage: `{limit_slippage}%`\n\n"
        "–ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ *–¥–æ—Å—Ç–∏–≥–Ω–µ—Ç* (–∏–ª–∏ *–æ–ø—É—Å—Ç–∏—Ç—Å—è* –Ω–∏–∂–µ) —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞,\n"
        "–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É."
    )

    if edit:
        await message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data == "limit_buy_set_trigger_price", flags={"priority": 3})
async def on_limit_buy_set_trigger_price(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã (USD).
    """
    try:
        await callback_query.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É –≤ USD, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `0.00075`",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="limit_buy_back_to_menu")]
            ])
        )
        await state.set_state(LimitBuyStates.set_trigger_price)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error on_limit_buy_set_trigger_price: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(LimitBuyStates.set_trigger_price)
async def on_limit_buy_trigger_price_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É (USD).
    """
    try:
        text = message.text.strip().replace(",", ".")
        price = float(text)
        if price <= 0:
            raise ValueError("Price must be > 0")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await state.update_data(trigger_price=price)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        await show_limit_buy_menu(message, state, edit=False)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ idle (–∏–ª–∏ —É–±–∏—Ä–∞–µ–º –≤–æ–æ–±—â–µ)
        await state.set_state(LimitBuyStates.idle)

    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
    except Exception as e:
        logger.error(f"Error on_limit_buy_trigger_price_input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã.")
        await state.clear()


@router.callback_query(lambda c: c.data == "limit_buy_set_amount_sol", flags={"priority": 3})
async def on_limit_buy_set_amount_sol(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –≤ SOL –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
    """
    try:
        await callback_query.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ SOL —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `0.1`",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="limit_buy_back_to_menu")]
            ])
        )
        await state.set_state(LimitBuyStates.set_amount_sol)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error on_limit_buy_set_amount_sol: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(LimitBuyStates.set_amount_sol)
async def on_limit_buy_amount_sol_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É SOL.
    """
    try:
        text = message.text.strip().replace(",", ".")
        amount = float(text)
        if amount <= 0:
            raise ValueError("Amount must be > 0")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await state.update_data(limit_amount_sol=amount)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await show_limit_buy_menu(message, state, edit=False)
        await state.set_state(LimitBuyStates.idle)

    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ > 0.")
    except Exception as e:
        logger.error(f"Error on_limit_buy_amount_sol_input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(lambda c: c.data == "limit_buy_set_slippage", flags={"priority": 3})
async def on_limit_buy_set_slippage(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ: –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ slippage (0-100).
    """
    try:
        await callback_query.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ slippage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä `1.5`.\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: 0.1 - 5%",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="limit_buy_back_to_menu")]
            ])
        )
        await state.set_state(LimitBuyStates.set_slippage)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error on_limit_buy_set_slippage: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(LimitBuyStates.set_slippage)
async def on_limit_buy_slippage_input(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º slippage –≤ FSM.
    """
    try:
        text = message.text.strip().replace(",", ".")
        slippage = float(text)
        if slippage <= 0 or slippage > 100:
            raise ValueError("Slippage out of range")

        await state.update_data(limit_slippage=slippage)

        await show_limit_buy_menu(message, state, edit=False)
        await state.set_state(LimitBuyStates.idle)

    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ slippage. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
    except Exception as e:
        logger.error(f"Error on_limit_buy_slippage_input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()
    

@router.callback_query(lambda c: c.data == "limit_buy_confirm", flags={"priority": 3})
async def on_limit_buy_confirm(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î / user_setting –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ.
    """
    try:
        user_id = get_real_user_id(callback_query)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        trigger_price = data.get("trigger_price")
        limit_amount_sol = data.get("limit_amount_sol")
        limit_slippage = data.get("limit_slippage")
        token_address = data.get("token_address")  # –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –≥–¥–µ-—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è

        # –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º
        if not trigger_price or not limit_amount_sol:
            await callback_query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´–ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä¬ª –≤ –ë–î –∏–ª–∏ –≤ user_setting
        # –ü—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ update_user_setting:
        limit_buy_settings = {
            "token_address": token_address,
            "trigger_price_usd": trigger_price,
            "amount_sol": limit_amount_sol,
            "gas_fee": 50000,
            "slippage": limit_slippage,
            "enabled": True,
        }
        await update_user_setting(user_id, "limit_buy", limit_buy_settings, session)

        await callback_query.message.edit_text(
            f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω.\n\n"
            f"‚Ä¢ –¶–µ–Ω–∞ (USD): {trigger_price}\n"
            f"‚Ä¢ –°—É–º–º–∞ (SOL): {limit_amount_sol}\n"
            f"‚Ä¢ Slippage: {limit_slippage}%",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

        await state.clear()
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Error on_limit_buy_confirm: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")
        await state.clear()




@router.callback_query(F.data == "auto_buy_settings", flags={"priority": 3})
async def show_auto_buy_settings(update: Union[types.Message, types.CallbackQuery], session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if isinstance(update, types.Message):
            user_id = update.from_user.id
            message = update
        else:  # CallbackQuery
            user_id = update.from_user.id
            message = update.message

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user = await session.scalar(
            select(User).where(User.telegram_id == user_id)
        )

        if not user:
            if isinstance(update, types.CallbackQuery):
                await update.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        settings = await get_user_setting(user_id, 'auto_buy', session)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'üü¢' if settings['type'] == 'buy' else '‚ö™Ô∏è'} –ü–æ–∫—É–ø–∫–∞",
                callback_data="toggle_auto_buy_type_buy"
            ),InlineKeyboardButton(
                text=f"{'üü¢' if settings['type'] == 'sell' else '‚ö™Ô∏è'} –ü—Ä–æ–¥–∞–∂–∞",
                callback_data="toggle_auto_buy_type_sell"
            )],
            [InlineKeyboardButton(
                text=f"{'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if settings['enabled'] else 'üî¥ –ù–µ –ê–∫—Ç–∏–≤–Ω–æ'} ",
                callback_data="toggle_auto_buy"
            )],
            [InlineKeyboardButton(
                text=f"üí∞ {'–°—É–º–º–∞' if settings['type'] == 'buy' else '–ü—Ä–æ—Ü–µ–Ω—Ç'}: {settings['amount_sol']}{' SOL' if settings['type'] == 'buy' else '%'}",
                callback_data="set_auto_buy_amount"
            )],
            [InlineKeyboardButton(
                text=f"‚öôÔ∏è Slippage: {settings['slippage']}%",
                callback_data="set_auto_buy_slippage"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        text = (
            "‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ (–ü—Ä–æ–¥–∞–∂–∏ / –ü–æ–∫—É–ø–∫–∏)\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if settings['enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"{'–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏' if settings['type'] == 'buy' else '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂–∏'}: {settings['amount_sol']}{' SOL' if settings['type'] == 'buy' else '%'}\n"
            f"Slippage: {settings['slippage']}%\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if isinstance(update, types.Message):
            await message.answer(text, reply_markup=keyboard)
        else:  # CallbackQuery
            await message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing auto-buy settings: {e}")
        if isinstance(update, types.CallbackQuery):
            await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        else:
            await update.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "toggle_auto_buy", flags={"priority": 3})
async def toggle_auto_buy(callback: types.CallbackQuery, session: AsyncSession):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±–∞–π"""
    try:
        user_id = get_real_user_id(callback)
        settings = await get_user_setting(user_id, 'auto_buy', session)
        settings['enabled'] = not settings['enabled']
        await update_user_setting(user_id, 'auto_buy', settings, session)
        await show_auto_buy_settings(callback, session)

    except Exception as e:
        logger.error(f"Error toggling auto-buy: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("toggle_auto_buy_type_"), flags={"priority": 3})
async def toggle_auto_buy(callback: types.CallbackQuery, session: AsyncSession):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±–∞–π"""
    try:
        params = callback.data
        setting_type = params.replace('toggle_auto_buy_type_', '')
        user_id = get_real_user_id(callback)
        settings = await get_user_setting(user_id, 'auto_buy', session)
        if settings['type'] == setting_type:
            return await callback.answer("–≠—Ç–æ—Ç —Ç–∏–ø —É–∂–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        settings['type'] = setting_type
        if setting_type == 'sell':
            settings['amount_sol'] = 100
        else:
            settings['amount_sol'] = 0.01
        await update_user_setting(user_id, 'auto_buy', settings, session)
        await show_auto_buy_settings(callback, session)

    except Exception as e:
        logger.error(f"Error toggling auto-buy: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "set_auto_buy_amount", flags={"priority": 3})
async def handle_set_auto_buy_amount(callback: types.CallbackQuery, state: FSMContext, session):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        user_id = get_real_user_id(callback)
        setting = await get_user_setting(user_id, 'auto_buy', session)
        await callback.message.answer(
            f"üí∞ {'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –≤ SOL' if setting['type'] == 'buy' else '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –≤ %'}\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {'0.1' if setting['type'] == 'buy' else '100'}",
            reply_markup=ForceReply(selective=True)
        )
        await state.set_state(AutoBuySettingsStates.ENTER_AMOUNT)
    except Exception as e:
        logger.error(f"Error in set auto-buy amount handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(AutoBuySettingsStates.ENTER_AMOUNT, flags={"priority": 3})
async def handle_auto_buy_amount_input(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        user_id = get_real_user_id(message)
        settings = await get_user_setting(user_id, 'auto_buy', session)
        try:
            amount = float(message.text.strip())
            if amount <= 0 or (amount >= 100 and settings['type'] == 'sell'):
                raise ValueError("Amount must be positive")
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ" + f" {'–æ—Ç 1 –¥–æ 100' if settings['type'] == 'sell' else '–æ—Ç 0'}",
                reply_markup=ForceReply(selective=True)
            )
            return

        settings['amount_sol'] = amount
        await update_user_setting(user_id, 'auto_buy', settings, session)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await state.clear()
        await message.reply(
            f"‚úÖ –°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount}{' SOL' if settings['type'] == 'buy' else '%'}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_auto_buy_settings(message, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy amount input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(F.data == "set_auto_buy_slippage", flags={"priority": 3})
async def handle_set_auto_buy_slippage(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        keyboard = await get_slippage_update_keyboard(
            state=state,
            prefix="auto_buy",
            back_callback="auto_buy_settings"
        )

        await callback.message.edit_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ slippage –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in set auto-buy slippage handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("auto_buy_slippage_"), flags={"priority": 3})
async def handle_auto_buy_slippage_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        choice = callback.data.split("_")[3]  # auto_buy_slippage_X -> X
        print("\n\nCHOICE", choice, "\n\n")
        if choice == "custom":
            await callback.message.edit_text(
                "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ slippage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1.5",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_auto_buy_slippage")]
                ])
            )
            await state.set_state(AutoBuySettingsStates.ENTER_SLIPPAGE)
            return

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        slippage = float(choice)
        user_id = get_real_user_id(callback)
        settings = await get_user_setting(user_id, 'auto_buy', session)
        settings['slippage'] = slippage
        await update_user_setting(user_id, 'auto_buy', settings, session)
        await show_auto_buy_settings(callback, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy slippage choice: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(AutoBuySettingsStates.ENTER_SLIPPAGE, flags={"priority": 3})
async def handle_auto_buy_slippage_input(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            slippage = float(message.text.strip())
            if slippage <= 0 or slippage > 100:
                raise ValueError("Slippage must be between 0 and 100")
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç slippage\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_auto_buy_slippage")]
                ])
            )
            return
        slippage = float(slippage)
        user_id = get_real_user_id(message)
        settings = await get_user_setting(user_id, 'auto_buy', session)
        settings['slippage'] = slippage
        await update_user_setting(user_id, 'auto_buy', settings, session)
        await state.clear()
        await message.answer(
            f"‚úÖ Slippage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {slippage}%"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_auto_buy_settings(message, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy slippage input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(F.text.len() == 44 and StateFilter(None), flags={"priority": 1})
async def handle_auto_buy(message: types.Message, state: FSMContext, session: AsyncSession,
                          solana_service: SolanaService):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ mint –∞–¥—Ä–µ—Å–∞"""
    try:
        logger.info('Handler: AUTO-BUY start')
        user_id = get_real_user_id(message)
        auto_buy_settings = await get_user_setting(user_id, 'auto_buy', session)
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–±–∞–π –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ mint –∞–¥—Ä–µ—Å–æ–º
        token_address = message.text.strip()
        if not _is_valid_token_address(token_address):
            return

        logger.info(f"Detected mint address: {token_address}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            logger.warning(f"User not found for auto-buy: {user_id}")
            return
        
        if not (await get_user_setting(user_id, 'auto_buy', session))['enabled']:
            logger.warning(f"User not enabled: {user_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        balance = await solana_service.get_wallet_balance(user.solana_wallet)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if balance < auto_buy_settings['amount_sol']:
            await message.reply(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {auto_buy_settings['amount_sol']} SOL\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {_format_price(balance)} SOL",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏
        status_message = await message.reply(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        try:
            user_id = get_real_user_id(message)
            aut_buy_settings = await get_user_setting(user_id, 'auto_buy', session)
            settings = await get_user_setting(user_id, aut_buy_settings['type'], session)
            tx_handler = UserTransactionHandler(user.private_key, settings['gas_fee'])
        except ValueError as e:
            logger.error(f"Failed to initialize transaction handler: {e}")
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        amount_sol = auto_buy_settings['amount_sol']
        slippage = auto_buy_settings['slippage']

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        token_info = await token_info_service.get_token_info(token_address)
        if auto_buy_settings['type'] == 'buy':
            tx_signature = await tx_handler.buy_token(
                token_address=token_address,
                amount_sol=amount_sol,
                slippage=slippage
            )
        else:
            tx_signature = await tx_handler.sell_token(
                token_address=token_address,
                sell_percentage=amount_sol,
                slippage=slippage
            )

        if tx_signature:
            logger.info(f"Auto-{auto_buy_settings['type']} successful: {tx_signature}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await status_message.edit_text(
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ {'–ö—É–ø–ª–µ–Ω' if auto_buy_settings['type'] == 'buy' else '–ü—Ä–æ–¥–∞–Ω'}!\n\n"
                f"ü™ô –¢–æ–∫–µ–Ω: {token_info.symbol if token_info else 'Unknown'}\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {_format_price(amount_sol)} SOL {'($' + _format_price(float(token_info.price_usd) * float(amount_sol)) + ')' if token_info and token_info.price_usd else ''}\n"
                f"‚öôÔ∏è Slippage: {slippage}%\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: {_format_price(balance - amount_sol)} SOL\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Explorer](https://solscan.io/tx/{tx_signature})",
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            logger.error("Auto-buy transaction failed")
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    except Exception as e:
        logger.error(f"Error in auto-buy handler: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–µ\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )


@router.callback_query(F.data == "limit_orders", flags={"priority": 3})
async def show_limit_orders(callback_query: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        user_id = get_real_user_id(callback_query)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = (
            select(LimitOrder)
            .where(
                LimitOrder.user_id == user.id,
                LimitOrder.status == 'active'
            )
            .order_by(LimitOrder.created_at.desc())
        )
        result = await session.execute(stmt)
        orders = result.scalars().all()

        if not orders:
            await callback_query.message.edit_text(
                "üìä –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ä–¥–µ—Ä–æ–≤
        message_text = "üìä –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞\n\n"
        keyboard = []

        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = await token_info_service.get_token_info(order.token_address)
            if not token_info:
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
            message_text += (
                f"üéØ –û—Ä–¥–µ—Ä #{order.id}\n"
                f"üí∞ –°—É–º–º–∞: {_format_price(order.amount_sol)} SOL\n"
                f"üìà –¢—Ä–∏–≥–≥–µ—Ä: {order.trigger_price_percent}% (${_format_price(order.trigger_price_usd)})\n"
                f"üíé –¢–æ–∫–µ–Ω: {token_info.symbol}\n"
                f"‚öôÔ∏è Slippage: {order.slippage}%\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')} (UTC+0)\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{order.id}",
                    callback_data=f"cancel_limit_order_{order.id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])

        await callback_query.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error showing limit orders: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("cancel_limit_order_"), flags={"priority": 3})
async def cancel_limit_order(callback_query: types.CallbackQuery, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
    try:
        user_id = get_real_user_id(callback_query)
        order_id = int(callback_query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä
        stmt = (
            select(LimitOrder)
            .where(
                LimitOrder.id == order_id,
                LimitOrder.status == 'active'
            )
        )
        result = await session.execute(stmt)
        order = result.scalar_one_or_none()

        if not order:
            await callback_query.answer("‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—Ä–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user or order.user_id != user.id:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –æ—Ä–¥–µ—Ä–∞")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        order.status = 'cancelled'
        await session.commit()

        await callback_query.answer("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
        await show_limit_orders(callback_query, session)

    except Exception as e:
        logger.error(f"Error cancelling limit order: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞")

    