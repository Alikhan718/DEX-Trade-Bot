import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from ...services.solana import SolanaService
from ...services.token_info import TokenInfoService
from ...database.models import User
from .start import get_real_user_id
from ...solana_module.transaction_handler import UserTransactionHandler

logger = logging.getLogger(__name__)

router = Router()
token_info_service = TokenInfoService()

class BuyStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_amount = State()
    waiting_for_slippage = State()

def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        if len(address) != 44:
            return False
        valid_chars = set("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
        return all(c in valid_chars for c in address)
    except Exception:
        return False

def _format_price(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if amount >= 1_000_000:
        return f"{amount/1_000_000:.2f}M"
    elif amount >= 1_000:
        return f"{amount/1_000:.1f}K"
    else:
        return f"{amount:.2f}"

@router.callback_query(lambda c: c.data == "buy")
async def on_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        await callback_query.message.edit_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
            parse_mode="MARKDOWN",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.set_state(BuyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in buy button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(BuyStates.waiting_for_token)
async def handle_token_input(message: types.Message, state: FSMContext, session: AsyncSession, solana_service: SolanaService):
    """Handle token address input"""
    try:
        token_address = message.text.strip()
        
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return
            
        # Get user info
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return
            
        # Get wallet balance
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price
        
        # Save token address to state
        await state.update_data(token_address=token_address)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
            [
                InlineKeyboardButton(text="0.2 SOL", callback_data="buy_0.2"),
                InlineKeyboardButton(text="0.5 SOL", callback_data="buy_0.5"),
                InlineKeyboardButton(text="1 SOL", callback_data="buy_1.0")
            ],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL", callback_data="custom_amount")],
            # Slippage
            [InlineKeyboardButton(text="‚öôÔ∏è Slippage: 1%", callback_data="set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
            f"‚Ä¢ SOL Balance: {balance:.4f} SOL (${usd_balance:.2f})\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )
        
        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error processing token address: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        ) 

@router.callback_query(lambda c: c.data == "confirm_buy")
async def handle_confirm_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle buy confirmation"""
    try:
        # Get user data
        user_id = get_real_user_id(callback_query)
        logger.info(f"Processing buy confirmation for user: {user_id}")
        
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user:
            logger.error(f"User not found: {user_id}")
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Get state data
        data = await state.get_data()
        token_address = data.get("token_address")
        amount_sol = data.get("amount_sol", 0.0)
        slippage = data.get("slippage", 1.0)
        
        logger.info(f"Buy parameters - Token: {token_address}, Amount: {amount_sol} SOL, Slippage: {slippage}%")
        
        if not token_address or not amount_sol:
            logger.error("Missing token address or amount")
            await callback_query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å—É–º–º–∞")
            return
            
        # Initialize transaction handler with user's private key
        try:
            logger.info("Initializing transaction handler")
            tx_handler = UserTransactionHandler(user.private_key)
        except ValueError:
            logger.error("Failed to initialize transaction handler")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞")
            return
            
        # Send status message
        status_message = await callback_query.message.answer(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
        )
        
        # Execute buy transaction
        logger.info("Executing buy transaction")
        tx_signature = await tx_handler.buy_token(
            token_address=token_address,
            amount_sol=amount_sol,
            slippage=slippage
        )
        
        if tx_signature:
            logger.info(f"Buy transaction successful: {tx_signature}")
            # Update success message
            await status_message.edit_text(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {amount_sol} SOL\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Explorer](https://solscan.io/tx/{tx_signature})",
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            logger.error("Buy transaction failed")
            # Update error message
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        
        # Clear state
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming buy: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()

@router.callback_query(lambda c: c.data == "set_slippage")
async def handle_set_slippage(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle slippage setting button"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="0.5%", callback_data="slippage_0.5"),
            InlineKeyboardButton(text="1%", callback_data="slippage_1"),
            InlineKeyboardButton(text="2%", callback_data="slippage_2")
        ],
        [
            InlineKeyboardButton(text="3%", callback_data="slippage_3"),
            InlineKeyboardButton(text="5%", callback_data="slippage_5"),
            InlineKeyboardButton(text="Custom", callback_data="slippage_custom")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")]
    ])
    
    await callback_query.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slippage\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã:\n"
        "‚Ä¢ –ß–µ–º –≤—ã—à–µ slippage, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –ß–µ–º –Ω–∏–∂–µ slippage, —Ç–µ–º –ª—É—á—à–µ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1-2%",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("slippage_"))
async def handle_slippage_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle slippage choice"""
    choice = callback_query.data.split("_")[1]
    
    if choice == "custom":
        await callback_query.message.edit_text(
            "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Slippage\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_slippage")]
            ])
        )
        await state.set_state(BuyStates.waiting_for_slippage)
        return
        
    # Convert choice to float and save to state
    slippage = float(choice)
    await state.update_data(slippage=slippage)
    
    # Return to buy menu
    await show_buy_menu(callback_query.message, state)

@router.message(BuyStates.waiting_for_slippage)
async def handle_custom_slippage(message: types.Message, state: FSMContext):
    """Handle custom slippage input"""
    try:
        slippage = float(message.text.replace(",", "."))
        if slippage <= 0 or slippage > 100:
            raise ValueError("Invalid slippage value")
            
        await state.update_data(slippage=slippage)
        await show_buy_menu(message, state)
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_slippage")]
            ])
        )

@router.callback_query(lambda c: c.data == "back_to_buy")
async def handle_back_to_buy(callback_query: types.CallbackQuery, state: FSMContext):
    """Return to buy menu"""
    await show_buy_menu(callback_query.message, state)

async def show_buy_menu(message: types.Message, state: FSMContext):
    """Show buy menu with current settings"""
    data = await state.get_data()
    token_address = data.get("token_address")
    slippage = data.get("slippage", 1.0)
    
    # Get token info again
    token_info = await token_info_service.get_token_info(token_address)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
        [
            InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
            InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
        ],
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
        [
            InlineKeyboardButton(text="0.2 SOL", callback_data="buy_0.2"),
            InlineKeyboardButton(text="0.5 SOL", callback_data="buy_0.5"),
            InlineKeyboardButton(text="1 SOL", callback_data="buy_1.0")
        ],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL", callback_data="custom_amount")],
        # Slippage
        [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="set_slippage")],
        # –î–µ–π—Å—Ç–≤–∏—è
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    message_text = (
        f"${token_info.symbol} üìà - {token_info.name}\n\n"
        f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ Slippage: {slippage}%\n\n"
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
        f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
        f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
        f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
        f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
        f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
    )
    
    await message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="MARKDOWN",
        disable_web_page_preview=True
    ) 

@router.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_preset_amount(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle preset amount buttons"""
    try:
        # Extract amount from callback data
        amount = float(callback_query.data.split("_")[1])
        
        # Save amount to state
        await state.update_data(amount_sol=amount)
        
        # Update message with selected amount
        data = await state.get_data()
        token_address = data.get("token_address")
        slippage = data.get("slippage", 1.0)
        
        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ")
            return
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            [
                InlineKeyboardButton(
                    text="‚úì 0.2 SOL" if amount == 0.2 else "0.2 SOL",
                    callback_data="buy_0.2"
                ),
                InlineKeyboardButton(
                    text="‚úì 0.5 SOL" if amount == 0.5 else "0.5 SOL",
                    callback_data="buy_0.5"
                ),
                InlineKeyboardButton(
                    text="‚úì 1 SOL" if amount == 1.0 else "1 SOL",
                    callback_data="buy_1.0"
                )
            ],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL", callback_data="custom_amount")],
            # Slippage
            [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {amount} SOL\n"
            f"‚öôÔ∏è Slippage: {slippage}%\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error handling preset amount: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 