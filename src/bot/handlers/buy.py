import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import re
from typing import Union

from src.services.solana_service import SolanaService
from src.services.token_info import TokenInfoService
from src.database.models import User
from .start import get_real_user_id
from src.solana_module.transaction_handler import UserTransactionHandler
from src.bot.states import BuyStates, AutoBuySettingsStates
from solders.pubkey import Pubkey
from src.solana_module.utils import get_bonding_curve_address

logger = logging.getLogger(__name__)

router = Router()
token_info_service = TokenInfoService()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è mint –∞–¥—Ä–µ—Å–∞
MINT_ADDRESS_PATTERN = r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{44}$'


def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        return bool(re.match(MINT_ADDRESS_PATTERN, address))
    except Exception:
        return False


def _format_price(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if amount >= 1_000_000:
        return f"{amount / 1_000_000:.2f}M"
    elif amount >= 1_000:
        return f"{amount / 1_000:.1f}K"
    else:
        return f"{amount:.2f}"


@router.callback_query(F.data == "buy", flags={"priority": 3})
async def on_buy_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        await callback_query.message.edit_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
            parse_mode="MARKDOWN",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.set_state(BuyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in buy button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(BuyStates.waiting_for_token, flags={"priority": 3})
async def handle_token_input(message: types.Message, state: FSMContext, session: AsyncSession,
                             solana_service: SolanaService):
    """Handle token address input"""
    try:
        token_address = message.text.strip()

        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return

        # Get user info
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return

        # Get wallet balance
        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        sol_price = await solana_service.get_sol_price()
        usd_balance = balance * sol_price

        # Save token address and initial slippage to state
        await state.update_data({
            'token_address': token_address,
            'slippage': 1.0  # Default slippage
        })

        # Get current slippage from state
        data = await state.get_data()
        slippage = data.get('slippage', 1.0)  # Default to 1% if not set

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
            [
                InlineKeyboardButton(text="0.002 SOL", callback_data="buy_0.002"),
                InlineKeyboardButton(text="0.005 SOL", callback_data="buy_0.005"),
                InlineKeyboardButton(text="0.01 SOL", callback_data="buy_0.01")
            ],
            [
                InlineKeyboardButton(text="0.02 SOL", callback_data="buy_0.02"),
                InlineKeyboardButton(text="0.1 SOL", callback_data="buy_0.1"),
                InlineKeyboardButton(text="Custom", callback_data="custom_amount")
            ],
            # Slippage
            [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="buy_set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
            f"‚Ä¢ SOL Balance: {balance:.4f} SOL (${usd_balance:.2f})\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"Error processing token address: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )


@router.callback_query(lambda c: c.data == "confirm_buy", flags={"priority": 3})
async def handle_confirm_buy(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle buy confirmation"""
    try:
        # Get user data
        user_id = get_real_user_id(callback_query)
        logger.info(f"Processing buy confirmation for user: {user_id}")

        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            logger.error(f"User not found: {user_id}")
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Get state data
        data = await state.get_data()
        token_address = data.get("token_address")
        amount_sol = data.get("amount_sol", 0.0)
        slippage = data.get("slippage", 1.0)

        logger.info(f"Buy parameters - Token: {token_address}, Amount: {amount_sol} SOL, Slippage: {slippage}%")

        if not token_address or not amount_sol:
            logger.error("Missing token address or amount")
            await callback_query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å—É–º–º–∞")
            return

        # Initialize transaction handler with user's private key
        try:
            logger.info("Initializing transaction handler")
            tx_handler = UserTransactionHandler(user.private_key)
        except ValueError:
            logger.error("Failed to initialize transaction handler")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞")
            return

        # Send status message
        status_message = await callback_query.message.answer(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
        )

        # Get token price before transaction
        mint = Pubkey.from_string(token_address)
        bonding_curve, _ = get_bonding_curve_address(mint, tx_handler.client.PUMP_PROGRAM)
        curve_state = await tx_handler.client.get_pump_curve_state(bonding_curve)
        token_price_sol = tx_handler.client.calculate_pump_curve_price(curve_state)

        # Execute buy transaction
        logger.info("Executing buy transaction")
        tx_signature = await tx_handler.buy_token(
            token_address=token_address,
            amount_sol=amount_sol,
            slippage=slippage
        )

        if tx_signature:
            logger.info(f"Buy transaction successful: {tx_signature}")

            # Calculate token amount from SOL amount and price
            token_amount = amount_sol / token_price_sol

            # Update success message
            await status_message.edit_text(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {amount_sol} SOL\n"
                f"üìà –ü–æ–ª—É—á–µ–Ω–æ: {token_amount:.6f} —Ç–æ–∫–µ–Ω–æ–≤\n"
                f"üíµ –¶–µ–Ω–∞: {token_price_sol:.6f} SOL\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Explorer](https://solscan.io/tx/{tx_signature})",
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            logger.error("Buy transaction failed")
            # Update error message
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

        # Clear state
        await state.clear()

    except Exception as e:
        logger.error(f"Error confirming buy: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(lambda c: c.data == "buy_set_slippage", flags={"priority": 10})
async def handle_set_slippage(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle slippage setting button"""
    try:
        # Get current data to verify we're in buy context
        data = await state.get_data()

        if not data.get("token_address"):
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–∫–µ–Ω")
            return

        # Save buy context
        await state.update_data(menu_type="buy")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="0.5%", callback_data="buy_slippage_0.5"),
                InlineKeyboardButton(text="1%", callback_data="buy_slippage_1"),
                InlineKeyboardButton(text="2%", callback_data="buy_slippage_2")
            ],
            [
                InlineKeyboardButton(text="3%", callback_data="buy_slippage_3"),
                InlineKeyboardButton(text="5%", callback_data="buy_slippage_5"),
                InlineKeyboardButton(text="Custom", callback_data="buy_slippage_custom")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buy")]
        ])

        await callback_query.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã:\n"
            "‚Ä¢ –ß–µ–º –≤—ã—à–µ slippage, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ –ß–µ–º –Ω–∏–∂–µ slippage, —Ç–µ–º –ª—É—á—à–µ —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 1-2%",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in set_slippage handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("buy_slippage_"), flags={"priority": 10})
async def handle_slippage_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle slippage choice"""
    try:
        # Verify we're in buy context
        data = await state.get_data()

        if data.get("menu_type") != "buy":
            return

        choice = callback_query.data.split("_")[2]  # buy_slippage_X -> X

        if choice == "custom":
            await callback_query.message.edit_text(
                "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_slippage_buy")]
                ])
            )
            await state.set_state(BuyStates.waiting_for_slippage)
            return

        # Convert choice to float and save to state
        slippage = float(choice)
        await state.update_data(slippage=slippage)
        await show_buy_menu(callback_query.message, state)

    except Exception as e:
        logger.error(f"Error handling slippage choice: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(BuyStates.waiting_for_slippage)
async def handle_custom_slippage(message: types.Message, state: FSMContext):
    """Handle custom slippage input"""
    try:
        slippage = float(message.text.replace(",", "."))
        if slippage <= 0 or slippage > 100:
            raise ValueError("Invalid slippage value")

        await state.update_data(slippage=slippage)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        status_message = await message.answer(f"‚úÖ Slippage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {slippage}%")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
        await show_buy_menu(status_message, state)

    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_slippage_buy")]
            ])
        )


@router.callback_query(lambda c: c.data == "back_to_buy", flags={"priority": 10})
async def handle_back_to_buy(callback_query: types.CallbackQuery, state: FSMContext):
    """Return to buy menu"""
    logger.info("[BUY] Handling back_to_buy")
    data = await state.get_data()
    logger.info(f"[BUY] Current state data: {data}")
    if data.get("menu_type") != "buy":
        logger.warning(f"[BUY] Wrong menu type: {data.get('menu_type')}")
        return
    await show_buy_menu(callback_query.message, state)
    logger.info("[BUY] Showed buy menu")


async def show_buy_menu(message: types.Message, state: FSMContext):
    """Show buy menu with current token info and settings"""
    try:
        # Get current data
        data = await state.get_data()
        token_address = data.get("token_address")
        amount_sol = data.get("amount_sol", 0.0)
        slippage = data.get("slippage", 1.0)

        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
            [
                InlineKeyboardButton(text="0.002 SOL", callback_data="buy_0.002"),
                InlineKeyboardButton(text="0.005 SOL", callback_data="buy_0.005"),
                InlineKeyboardButton(text="0.01 SOL", callback_data="buy_0.01")
            ],
            [
                InlineKeyboardButton(text="0.02 SOL", callback_data="buy_0.02"),
                InlineKeyboardButton(text="0.1 SOL", callback_data="buy_0.1"),
                InlineKeyboardButton(text="Custom", callback_data="custom_amount")
            ],
            # Slippage
            [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="buy_set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {amount_sol} SOL\n"
            f"‚öôÔ∏è Slippage: {slippage}%\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        await message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"Error showing buy menu: {e}")
        await message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )


@router.callback_query(lambda c: c.data.startswith("buy_"))
async def handle_preset_amount(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle preset amount buttons"""
    try:
        # Extract amount from callback data
        amount = float(callback_query.data.split("_")[1])

        # Save amount to state
        await state.update_data(amount_sol=amount)

        # Update message with selected amount
        data = await state.get_data()
        token_address = data.get("token_address")
        slippage = data.get("slippage", 1.0)

        # Get token info
        token_info = await token_info_service.get_token_info(token_address)
        if not token_info:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
            [
                InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="market_buy"),
                InlineKeyboardButton(text="üìä –õ–∏–º–∏—Ç–Ω—ã–π", callback_data="limit_buy")
            ],
            # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π
            [
                InlineKeyboardButton(
                    text="‚úì 0.002 SOL" if amount == 0.002 else "0.002 SOL",
                    callback_data="buy_0.002"
                ),
                InlineKeyboardButton(
                    text="‚úì 0.005 SOL" if amount == 0.005 else "0.005 SOL",
                    callback_data="buy_0.005"
                ),
                InlineKeyboardButton(
                    text="‚úì 0.01 SOL" if amount == 0.01 else "0.01 SOL",
                    callback_data="buy_0.01"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úì 0.02 SOL" if amount == 0.02 else "0.02 SOL",
                    callback_data="buy_0.02"
                ),
                InlineKeyboardButton(
                    text="‚úì 0.1 SOL" if amount == 0.1 else "0.1 SOL",
                    callback_data="buy_0.1"
                ),
                InlineKeyboardButton(text="Custom", callback_data="custom_amount")
            ],
            # Slippage
            [InlineKeyboardButton(text=f"‚öôÔ∏è Slippage: {slippage}%", callback_data="buy_set_slippage")],
            # –î–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data="confirm_buy")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        message_text = (
            f"${token_info.symbol} üìà - {token_info.name}\n\n"
            f"üìç –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:\n`{token_address}`\n\n"
            f"üí∞ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {amount} SOL\n"
            f"‚öôÔ∏è Slippage: {slippage}%\n\n"
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:\n"
            f"‚Ä¢ Price: ${_format_price(token_info.price_usd)}\n"
            f"‚Ä¢ MC: ${_format_price(token_info.market_cap)}\n"
            f"‚Ä¢ Renounced: {'‚úì' if token_info.is_renounced else '‚úó'} "
            f"Burnt: {'‚úì' if token_info.is_burnt else '‚úó'}\n\n"
            f"üîç –ê–Ω–∞–ª–∏–∑: [Pump](https://www.pump.fun/{token_address})"
        )

        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"Error handling preset amount: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "auto_buy_settings", flags={"priority": 3})
async def show_auto_buy_settings(update: Union[types.Message, types.CallbackQuery], session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if isinstance(update, types.Message):
            user_id = update.from_user.id
            message = update
        else:  # CallbackQuery
            user_id = update.from_user.id
            message = update.message

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user = await session.scalar(
            select(User).where(User.telegram_id == user_id)
        )

        if not user:
            if isinstance(update, types.CallbackQuery):
                await update.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # settings = await session.scalar(
        #     select(AutoBuySettings).where(AutoBuySettings.user_id == user.id)
        # )

        # if not settings:
        #     –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # settings = AutoBuySettings(user_id=user.id)
        # session.add(settings)
        # await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{'üî¥'} –ê–≤—Ç–æ–±–∞–π",
                # text=f"{'üü¢' if settings.enabled else 'üî¥'} –ê–≤—Ç–æ–±–∞–π",
                callback_data="toggle_auto_buy"
            )],
            [InlineKeyboardButton(
                text=f"üí∞ –°—É–º–º–∞: –°–£–ú–ú–ê SOL",
                # text=f"üí∞ –°—É–º–º–∞: {settings.amount_sol} SOL",
                callback_data="set_auto_buy_amount"
            )],
            [InlineKeyboardButton(
                text=f"‚öôÔ∏è Slippage: SLIP%",
                # text=f"‚öôÔ∏è Slippage: {settings.slippage}%",
                callback_data="set_auto_buy_slippage"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        text = (
            "‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ–±–∞—è\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'–í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: –°–£–ú–ú–ê SOL\n"
            f"Slippage: SLIP%\n"
            # f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if settings.enabled else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
            # f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {settings.amount_sol} SOL\n"
            # f"Slippage: {settings.slippage}%\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if isinstance(update, types.Message):
            await message.answer(text, reply_markup=keyboard)
        else:  # CallbackQuery
            await message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error showing auto-buy settings: {e}")
        if isinstance(update, types.CallbackQuery):
            await update.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        else:
            await update.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "toggle_auto_buy", flags={"priority": 3})
async def toggle_auto_buy(callback: types.CallbackQuery, session: AsyncSession):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±–∞–π"""
    try:
        pass
        # settings = await session.scalar(
        #     select(AutoBuySettings)
        #     .join(User)
        #     .where(User.telegram_id == callback.from_user.id)
        # )
        #
        # if settings:
        #     settings.enabled = not settings.enabled
        #     await session.commit()
        #
        # await show_auto_buy_settings(callback, session)

    except Exception as e:
        logger.error(f"Error toggling auto-buy: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "set_auto_buy_amount", flags={"priority": 3})
async def handle_set_auto_buy_amount(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –≤ SOL\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 0.1",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_buy_settings")]
            ])
        )
        await state.set_state(AutoBuySettingsStates.ENTER_AMOUNT)
    except Exception as e:
        logger.error(f"Error in set auto-buy amount handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(AutoBuySettingsStates.ENTER_AMOUNT, flags={"priority": 3})
async def handle_auto_buy_amount_input(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            amount = float(message.text.strip())
            if amount <= 0:
                raise ValueError("Amount must be positive")
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_buy_settings")]
                ])
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        # settings = await session.scalar(
        #     select(AutoBuySettings)
        #     .join(User)
        #     .where(User.telegram_id == message.from_user.id)
        # )

        # if settings:
        #     settings.amount_sol = amount
        #     await session.commit()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await state.clear()
        await message.answer(
            f"‚úÖ –°—É–º–º–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount} SOL"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_auto_buy_settings(message, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy amount input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(F.data == "set_auto_buy_slippage", flags={"priority": 3})
async def handle_set_auto_buy_slippage(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="0.5%", callback_data="auto_buy_slippage_0.5"),
                InlineKeyboardButton(text="1%", callback_data="auto_buy_slippage_1"),
                InlineKeyboardButton(text="2%", callback_data="auto_buy_slippage_2")
            ],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="auto_buy_slippage_custom")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_buy_settings")]
        ])

        await callback.message.edit_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ slippage –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in set auto-buy slippage handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(lambda c: c.data.startswith("auto_buy_slippage_"), flags={"priority": 3})
async def handle_auto_buy_slippage_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        choice = callback.data.split("_")[2]  # auto_buy_slippage_X -> X

        if choice == "custom":
            await callback.message.edit_text(
                "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ slippage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1.5",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_auto_buy_slippage")]
                ])
            )
            await state.set_state(AutoBuySettingsStates.ENTER_SLIPPAGE)
            return

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        slippage = float(choice)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        # settings = await session.scalar(
        #     select(AutoBuySettings)
        #     .join(User)
        #     .where(User.telegram_id == callback.from_user.id)
        # )

        # if settings:
        #     settings.slippage = slippage
        #     await session.commit()

        await show_auto_buy_settings(callback, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy slippage choice: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.message(AutoBuySettingsStates.ENTER_SLIPPAGE, flags={"priority": 3})
async def handle_auto_buy_slippage_input(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ slippage –¥–ª—è –∞–≤—Ç–æ–±–∞—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            slippage = float(message.text.strip())
            if slippage <= 0 or slippage > 100:
                raise ValueError("Slippage must be between 0 and 100")
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç slippage\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="set_auto_buy_slippage")]
                ])
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        # settings = await session.scalar(
        #     select(AutoBuySettings)
        #     .join(User)
        #     .where(User.telegram_id == message.from_user.id)
        # )

        # if settings:
        #     settings.slippage = slippage
        #     await session.commit()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await state.clear()
        await message.answer(
            f"‚úÖ Slippage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {slippage}%"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_auto_buy_settings(message, session)

    except Exception as e:
        logger.error(f"Error processing auto-buy slippage input: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(flags={"allow_next": True})
async def handle_auto_buy(message: types.Message, state: FSMContext, session: AsyncSession,
                          solana_service: SolanaService):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ mint –∞–¥—Ä–µ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±–∞—è
        # settings = await session.scalar(
        #     select(AutoBuySettings)
        #     .join(User)
        #     .where(User.telegram_id == message.from_user.id)
        # ) todo fix

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–±–∞–π –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return
        if not settings or not settings.enabled:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()
        if current_state is not None:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ mint –∞–¥—Ä–µ—Å–æ–º
        token_address = message.text.strip()
        if not _is_valid_token_address(token_address):
            return

        logger.info(f"Detected mint address: {token_address}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            logger.warning(f"User not found for auto-buy: {user_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        balance = await solana_service.get_wallet_balance(user.solana_wallet)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if balance < settings.amount_sol:
            await message.reply(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {settings.amount_sol} SOL\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.4f} SOL",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏
        status_message = await message.reply(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
            ])
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        try:
            tx_handler = UserTransactionHandler(user.private_key)
        except ValueError as e:
            logger.error(f"Failed to initialize transaction handler: {e}")
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        amount_sol = settings.amount_sol
        slippage = settings.slippage

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        token_info = await token_info_service.get_token_info(token_address)

        tx_signature = await tx_handler.buy_token(
            token_address=token_address,
            amount_sol=amount_sol,
            slippage=slippage
        )

        if tx_signature:
            logger.info(f"Auto-buy successful: {tx_signature}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await status_message.edit_text(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"ü™ô –¢–æ–∫–µ–Ω: {token_info.symbol if token_info else 'Unknown'}\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {amount_sol} SOL\n"
                f"‚öôÔ∏è Slippage: {slippage}%\n"
                f"üí≥ –ë–∞–ª–∞–Ω—Å: {(balance - amount_sol):.4f} SOL\n"
                f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: [Explorer](https://solscan.io/tx/{tx_signature})",
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            logger.error("Auto-buy transaction failed")
            await status_message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    except Exception as e:
        logger.error(f"Error in auto-buy handler: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–µ\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
