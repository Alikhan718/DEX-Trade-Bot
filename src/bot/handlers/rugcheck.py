import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ...services.rugcheck import RugCheckService

logger = logging.getLogger(__name__)

router = Router()

class RugCheckStates(StatesGroup):
    waiting_for_token = State()

def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        if len(address) != 44:
            return False
        valid_chars = set("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
        return all(c in valid_chars for c in address)
    except Exception:
        return False

@router.callback_query(lambda c: c.data == "rugcheck")
async def on_rugcheck_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–∞–º"""
    try:
        await callback_query.message.edit_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–∫–∞–º:",
            parse_mode="MARKDOWN",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.set_state(RugCheckStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in rugcheck button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(RugCheckStates.waiting_for_token)
async def handle_token_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        token_address = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_message = await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        rugcheck_service = RugCheckService()
        try:
            result = await rugcheck_service.check_token(token_address)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ —ç–º–æ–¥–∑–∏
            verification_status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if result.verification else "‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–æ–≤
            critical_risks = sum(1 for r in result.risks if r.level == "CRITICAL")
            high_risks = sum(1 for r in result.risks if r.level == "HIGH")
            
            if critical_risks > 0:
                safety_emoji = "üö´"
                safety_status = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–ê–°–ù–û! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏!"
            elif high_risks >= 2:
                safety_emoji = "‚ö†Ô∏è"
                safety_status = "–û–ü–ê–°–ù–û! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏!"
            elif high_risks == 1:
                safety_emoji = "‚ö†Ô∏è"
                safety_status = "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∏—Å–∫!"
            else:
                safety_emoji = "‚úÖ"
                safety_status = "–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–∫–∞–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∫–æ—Ä–∞
            if len(result.risks) == 0:
                score_emoji = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è 0 —Ä–∏—Å–∫–æ–≤
            elif critical_risks > 0:
                score_emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
            elif high_risks > 0:
                score_emoji = "üü†"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
            else:
                score_emoji = "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message_text = (
                f"üõ°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞\n\n"
                f"üìç –¢–æ–∫–µ–Ω: {result.token_meta.name} ({result.token_meta.symbol})\n"
                f"üìù –ê–¥—Ä–µ—Å: `{result.mint}`\n\n"
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if result.token_meta.name != "Error Loading Token":
                message_text += (
                    f"{score_emoji} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤: {len(result.risks)}\n"
                    f"‚ú® –°—Ç–∞—Ç—É—Å: {verification_status}\n"
                    f"{safety_emoji} –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {safety_status}\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if result.total_market_liquidity > 0:
                    message_text += f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${result.total_market_liquidity:,.2f}\n"
                
                message_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö
            if result.risks:
                message_text += "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:\n"
                for risk in result.risks:
                    emoji = rugcheck_service.format_risk_level(risk.level)
                    message_text += f"{emoji} {risk.name}: {risk.description}\n"
            else:
                message_text += "‚úÖ –†–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if result.token_meta.name != "Error Loading Token":
                message_text += (
                    f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                )
                
                if critical_risks > 0:
                    message_text += (
                        f"‚Ä¢ ‚ö†Ô∏è –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n"
                        f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏\n"
                        f"‚Ä¢ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    )
                elif high_risks >= 2:
                    message_text += (
                        f"‚Ä¢ ‚ö†Ô∏è –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n"
                        f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏\n"
                        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    )
                elif high_risks == 1:
                    message_text += (
                        f"‚Ä¢ ‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º\n"
                        f"‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ —Ä–∏—Å–∫–∏\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                    )
                else:
                    message_text += (
                        f"‚Ä¢ DYOR (–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ\n"
                    )
                
                message_text += f"\nüîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑: [RugCheck](https://rugcheck.xyz/tokens/{token_address})"

            await status_message.edit_text(
                message_text,
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
        finally:
            await rugcheck_service.close()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing token address: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear() 