# /path/to/handlers/smart_money_handlers.py
import re
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
import asyncio
from aiogram import F
from aiogram.filters import Command
from src.services.smart_money import SmartMoneyTracker, token_info  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
from src.bot.states import SmartMoneyStates
from src.bot.handlers.buy import _format_price
from solders.pubkey import Pubkey
from src.solana_module.scrape import scrape_dune_wallet_data

logger = logging.getLogger(__name__)

router = Router()
smart_money_tracker = SmartMoneyTracker()  # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞


def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∞–¥—Ä–µ—Å–∞
        if len(address) != 44:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        valid_chars = set("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
        return all(c in valid_chars for c in address)

    except Exception:
        return False


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "Smart Money"
@router.callback_query(F.data == "smart_money", flags={"priority": 5})
async def on_smart_money_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Smart Money"""
    try:
        await callback_query.message.answer(
            "üß† Smart Money –ê–Ω–∞–ª–∏–∑\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
            parse_mode="MARKDOWN",
            reply_markup=ForceReply(selective=True)
        )
        await state.set_state(SmartMoneyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ Smart Money: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /smart
@router.message(Command("smart"), flags={"priority": 5})
async def handle_smart_money_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Smart Money –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
                "–ü—Ä–∏–º–µ—Ä: `/smart HtLFhnhxcm6HWr1Bcwz27BJdks9vecbSicVLGPPmpump`",
                parse_mode="MARKDOWN"
            )
            return

        token_address = parts[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await message.reply(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ—Ä–∞—Ö...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"
        )

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ SmartMoneyTracker
            metadata, traders = await asyncio.wait_for(
                smart_money_tracker.analyze_accounts(token_address),
                timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_message = format_smart_money_message(metadata, traders)

            await status_message.edit_text(
                result_message,
                parse_mode="MARKDOWN",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

        except asyncio.TimeoutError:
            await status_message.edit_text(
                "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ Smart Money: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞"
        )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
@router.message(SmartMoneyStates.waiting_for_token)
async def handle_token_address_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Smart Money –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        token_address = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        status_message = await message.reply(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–¥–µ—Ä–∞—Ö...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"
        )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–µ–π–ø–∏–Ω–≥
        traders = scrape_dune_wallet_data(token_address)
        metadata = token_info(token_address)
        result_message = format_smart_money_message(metadata, traders)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await status_message.edit_text(
            result_message,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞"
        )
        await state.clear()


def format_smart_money_message(metadata, traders):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    metadata_message = (
        f"üîπ <b>–¢–æ–∫–µ–Ω:</b> {metadata.get('baseTokenName')} ({metadata['baseToken'].get('symbol')})\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {_format_price(metadata.get('priceUsd'))} USD\n"
        f"üìà <b>–û–±—ä—ë–º:</b> {_format_price(metadata.get('marketCap'))} USD\n\n"
    )

    traders_message = "üßë‚Äçüíº <b>–ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã:</b>\n\n"
    for trader in traders[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 5 —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
        traders_message += (
            #f"üìú **–ê–¥—Ä–µ—Å:** [{trader.get('wallet', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}](https://t.me/test2737237bot?wallet={trader.get('wallet', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})\n"
            f"üìú <b>–ê–¥—Ä–µ—Å:</b> <code>{trader.get('wallet', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n"
            f"üí∞ <b>–ö—É–ø–ª–µ–Ω–æ:</b> {trader.get('sum_buys', 0)} USD\n"
            f"üíµ <b>–ü—Ä–æ–¥–∞–Ω–æ:</b> {trader.get('sum_sells', 0)} USD\n"
            f"üìà <b>–ü—Ä–∏–±—ã–ª—å PnL:</b> {trader.get('sum_pnl', 0)} USD\n"
            f"üìä <b>ROI:</b> {trader.get('roi_real', 0)}\n"
            f"üîç <a href=\"{re.search(r'href=\"([^\"]+)\"', trader['solscan']).group(1)}\">Solscan</a> | "
            f"üìä <a href=\"{re.search(r'href=\"([^\"]+)\"', trader['wallet_pnl']).group(1)}\">Wallet PnL</a> | "
            f"ü§ñ <a href=\"{re.search(r'href=\"([^\"]+)\"', trader['gmgn']).group(1)}\">gmgn</a> | "
            f"üåê <a href=\"{re.search(r'href=\"([^\"]+)\"', trader['cielo']).group(1)}\">cielo</a>\n\n"
        )

    return metadata_message + traders_message


@router.message(Command('wallet'))
async def handle_wallet_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    parts = message.text.split()[1]
    if len(parts) < 2:
        await message.reply(
            "ÔøΩÔøΩ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/wallet 0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1`",
            parse_mode="MARKDOWN"
        )
        return
    print('AAAAAAAAAAAAAAAAAAAA', parts)

    wallet_address = parts[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
    