import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ...services.smart_money import SmartMoneyTracker

logger = logging.getLogger(__name__)

router = Router()
smart_money_tracker = SmartMoneyTracker()

class SmartMoneyStates(StatesGroup):
    waiting_for_token = State()

@router.message(Command("smart"))
async def handle_smart_money_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è smart money –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        token_address = message.text.split()[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        if not _is_valid_token_address(token_address):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        status_message = await message.reply("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ smart money...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–∫–µ–Ω–∞ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        token_name = await _get_token_name(token_address)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        smart_money_info = await smart_money_tracker.format_smart_money_message(
            token_address,
            token_name
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await status_message.edit_text(
            smart_money_info,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ smart money: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ smart money")

@router.callback_query(lambda c: c.data == "smart_money")
async def on_smart_money_button(callback_query: types.CallbackQuery, state: FSMContext):
    """Handle Smart Money button press"""
    try:
        await callback_query.message.edit_text(
            "üß† Smart Money –ê–Ω–∞–ª–∏–∑\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await state.set_state(SmartMoneyStates.waiting_for_token)
    except Exception as e:
        logger.error(f"Error in smart money button handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(SmartMoneyStates.waiting_for_token)
async def handle_token_address_input(message: types.Message, state: FSMContext):
    """Handle token address input for Smart Money analysis"""
    try:
        token_address = message.text.strip()
        
        # Check if it's a valid token address
        if not _is_valid_token_address(token_address):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return

        # Reset state
        await state.clear()
        
        # Process the smart money analysis
        status_message = await message.reply("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ smart money...")
        
        token_name = await _get_token_name(token_address)
        smart_money_info = await smart_money_tracker.format_smart_money_message(
            token_address,
            token_name
        )
        
        await status_message.edit_text(
            smart_money_info,
            parse_mode="MARKDOWN",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error processing token address: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞")
        await state.clear()

def _is_valid_token_address(address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç base58
        if len(address) != 44 or not all(c in '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz' for c in address):
            return False
            
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å PublicKey –∏–∑ –∞–¥—Ä–µ—Å–∞
        from solders.pubkey import Pubkey as PublicKey
        PublicKey.from_string(address)
        return True
        
    except Exception as e:
        logger.error(f"Token address validation error: {e}")
        return False

async def _get_token_name(token_address: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return "Unknown Token"
    except Exception as e:
        logger.error(f"Error getting token name: {e}")
        return "Unknown Token" 