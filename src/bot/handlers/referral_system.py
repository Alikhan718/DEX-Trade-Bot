import os
import traceback
from typing import Union

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, Message
from solders.pubkey import Pubkey
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from src.bot.handlers.buy import _format_price
from src.bot.states import WithdrawStates
from src.bot.utils import get_real_user_id
from src.database import User, ReferralRecords
from src.services import SolanaService

router = Router()

logger = logging.getLogger(__name__)


@router.callback_query(F.data == "referral_menu", flags={"priority": 3})
async def show_referral_menu(update: Union[types.Message, types.CallbackQuery], session: AsyncSession):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if isinstance(update, types.Message):
            message = update
            user_id = update.from_user.id
        else:  # CallbackQuery
            message = update.message
            user_id = update.from_user.id

        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            logger.warning(f"No user found for ID {user_id}")
            if isinstance(update, types.Message):
                await message.reply(
                    "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ])
                )
            else:
                await message.edit_text(
                    "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ])
                )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        query = select(func.count(User.id)).where(User.referral_id == user.id)
        result = await session.execute(query)
        referral_count = result.scalar()
        query = select(ReferralRecords).where(ReferralRecords.user_id == user.id)
        result = await session.execute(query)
        referral_records = result.unique().scalars().all()
        referral_available_sol = 0
        referral_cashed_out_sol = 0
        for rec in referral_records:
            if rec.is_sent == False:
                referral_available_sol += float(rec.amount_sol or 0)
            else:
                referral_cashed_out_sol += float(rec.amount_sol or 0)

        menu_text = (
            "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞\n\n"
            "–î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ —Å –∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! \n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 0.5% –æ—Ç —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referral_count}</b>\n\n"
            f"‚ö†Ô∏è<b><i>–ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç 0.01 SOL</i></b>‚ö†Ô∏è\n\n"
            f"–ë–æ–Ω—É—Å—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {_format_price(referral_available_sol)} SOL\n"
            f"–£–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ: {_format_price(referral_cashed_out_sol)} SOL"
        )
        buy_settings_keyboard = []

        referral_keyboard = [
            InlineKeyboardButton(text=f"üöÄ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞",
                                 callback_data="copy_referral_link"),
            InlineKeyboardButton(text=f"üí∏ –í—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã",
                                 callback_data="claim_referral_bonus"),
        ]

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        buttonRows = []
        max_len = max(len(buy_settings_keyboard), len(referral_keyboard))
        for i in range(max_len):
            row = []
            if i < len(buy_settings_keyboard):
                row.append(buy_settings_keyboard[i])
            if i < len(referral_keyboard):
                row.append(referral_keyboard[i])
            buttonRows.append(row)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=
            buttonRows +  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            [
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="main_menu"
                    )
                ]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if isinstance(update, types.Message):
            await message.answer(menu_text, reply_markup=keyboard, parse_mode='HTML')
        else:  # CallbackQuery
            await message.edit_text(menu_text, reply_markup=keyboard, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error showing settings menu: {e}")
        traceback.print_exc()

        if isinstance(update, types.Message):
            await update.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
        else:  # CallbackQuery
            await update.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )


@router.callback_query(F.data == "copy_referral_link", flags={"priority": 3})
async def copy_referral_link(callback_query: types.CallbackQuery, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    try:
        user_id = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user or not user.referral_code:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="referral_menu")]
                ])
            )
            return
        bot_username = os.getenv("BOT_USERNAME")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/{bot_username}?start=code_{user.referral_code}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback_query.message.edit_text(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n`{referral_link}`",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="referral_menu")]
            ]),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error copying referral link: {e}")
        traceback.print_exc()

        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="referral_menu")]
            ])
        )


@router.callback_query(F.data == "claim_referral_bonus", flags={"priority": 3})
async def claim_referral_bonus(callback_query: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    logger.info("[REFERRAL] Starting address input process")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_data = await state.get_data()
    withdraw_amount = current_data.get("withdraw_amount")
    logger.info(f"[REFERRAL] Preserved withdraw amount: {withdraw_amount}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ

    await state.update_data(withdraw_amount=withdraw_amount)
    logger.info("[REFERRAL] Previous state cleared, amount restored")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(WithdrawStates.waiting_for_address)
    current_state = await state.get_state()
    logger.info(f"[REFERRAL] State set to: {current_state}")

    await callback_query.message.answer(
        "üìç –ó–î–ï–°–¨ –ú–û–ì–õ–ê –ë–´ –ë–´–¢–¨ –í–ê–®–ê –†–ï–ö–õ–ê–ú–ê –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=ForceReply(selective=True)
    )
    logger.info("[REFERRAL] Sent address input request with ForceReply")


@router.message(StateFilter(WithdrawStates.waiting_for_address), flags={"priority": 20})
async def handle_withdraw_address(message: Message, state: FSMContext, session: AsyncSession,
                                  solana_service: SolanaService):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    logger.info(f"[WITHDRAW] Received address message: {message.text}")
    try:
        address = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
        try:
            Pubkey.from_string(address)
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=ForceReply(selective=True)
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        await state.update_data(withdraw_address=address)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        user_id = get_real_user_id(message)
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        balance = await solana_service.get_wallet_balance(user.solana_wallet)
        data = await state.get_data()
        amount = data.get("withdraw_amount", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        await message.answer(
            f"üí∞ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã–≤–æ–¥ –±–æ–Ω—É—Å–æ–≤\n"
            f"üí∞ –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {_format_price(amount) if isinstance(amount, (int, float)) else amount}\n"
            f"üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {address}",
            reply_markup=withdraw_menu_keyboard
        )

    except Exception as e:
        logger.error(f"Error handling withdraw address: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞",
            reply_markup=withdraw_menu_keyboard
        )
