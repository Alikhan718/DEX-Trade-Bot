import aiohttp
import asyncio
import logging
from typing import Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from src.database.models import LimitOrder, User
from src.solana_module.transaction_handler import UserTransactionHandler
from src.solana_module.token_info import token_info
from src.services.token_info import TokenInfoService
from src.bot.handlers.buy import _format_price
from solders.signature import Signature

logger = logging.getLogger(__name__)

class AsyncLimitOrders:
    def __init__(self, session_factory, bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞.
        :param session_factory: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        """
        self.session_factory = session_factory
        self.session = None
        self._running = False
        self.url = "https://public-api.birdeye.so/public/price"
        self.headers = {"X-API-KEY": "f5b0a449b5914cf3bc0e1238db0a5b3f"}
        self.bot = bot

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        self.session = aiohttp.ClientSession()
        logger.info("HTTP session initialized")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            logger.info("HTTP session closed")
            
    async def show_success_limit_order(self, session: AsyncSession, order_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ª–∏–º–∏—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        stmt = (
            select(LimitOrder)
            .where(LimitOrder.id == order_id)
        )
        result = await session.execute(stmt)
        order = result.unique().scalar_one_or_none()
        
        logger.info(f"Sending success limit order notification for order {order_id}")

        if not order:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        stmt = select(User).where(User.id == order.user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()
        
        logger.info(f"User ID: {user.telegram_id}")

        if not user:
            return
        
        token_info_service = TokenInfoService()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = await token_info_service.get_token_info(order.token_address)
        
        logger.info(f"Token ID: {token_info.address}")
        
        if not token_info:
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self.bot.send_message(
            user.telegram_id,
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä #{order_id}\n"
            f"üí∞ –°—É–º–º–∞: {_format_price(order.amount_sol)} SOL\n"
            f"üìâ –¢—Ä–∏–≥–≥–µ—Ä: {order.trigger_price_percent}% (${_format_price(order.trigger_price_usd)})\n"
            f"üîñ –¢–æ–∫–µ–Ω: {token_info.symbol}\n"
            f"‚öôÔ∏è Slippage: {order.slippage}%\n"
            f"üïí –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')} (UTC+0)"
        )
    
    async def error_limit_order(self, session: AsyncSession, order_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–æ—á–Ω–æ–º –ª–∏–º–∏—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        stmt = (
            select(LimitOrder)
            .where(LimitOrder.id == order_id)
        )
        result = await session.execute(stmt)
        order = result.unique().scalar_one_or_none()

        if not order:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        stmt = select(User).where(User.id == order.user_id)
        result = await session.execute(stmt)
        user = result.unique().scalar_one_or_none()

        if not user:
            return
        
        token_info_service = TokenInfoService()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = await token_info_service.get_token_info(order.token_address)
        
        if not token_info:
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await self.bot.send_message(
            user.telegram_id,
            f"‚ùå –û—à–∏–±–æ—á–Ω—ã–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä #{order_id}\n"
            f"üí∞ –°—É–º–º–∞: {_format_price(order.amount_sol)} SOL\n"
            f"üìâ –¢—Ä–∏–≥–≥–µ—Ä: {order.trigger_price_percent}% (${_format_price(order.trigger_price_usd)})\n"
            f"üîñ –¢–æ–∫–µ–Ω: {token_info.symbol}\n"
            f"‚öôÔ∏è Slippage: {order.slippage}%\n"
            f"üïí –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')} (UTC+0)"
        )

    async def execute_order(self, order: LimitOrder, session: AsyncSession) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        :param order: –û–±—ä–µ–∫—Ç –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        :param session: –°–µ—Å—Å–∏—è SQLAlchemy
        :return: True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(User).where(User.id == order.user_id)
            result = await session.execute(stmt)
            user = result.unique().scalar_one_or_none()
            
            if not user or not user.private_key:
                logger.error(f"User not found or no private key for order {order.id}")
                return False

            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            tx_handler = UserTransactionHandler(
                private_key_str=user.private_key,
                compute_unit_price=1000000  # Default compute unit price
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
            if order.order_type == 'buy':
                tx_hash = await tx_handler.buy_token(
                    token_address=order.token_address,
                    amount_sol=order.amount_sol,
                    slippage=order.slippage
                )
            else:  # sell
                tx_hash = await tx_handler.sell_token(
                    token_address=order.token_address,
                    amount_tokens=order.amount_tokens,
                    slippage=order.slippage
                )
                
            if isinstance(tx_hash, Signature):
                tx_hash = str(tx_hash)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                order.status = 'executed'
                order.transaction_hash = tx_hash
                await session.commit()
                logger.info(f"Order {order.id} executed successfully. Hash: {tx_hash}")
                await self.show_success_limit_order(session, order.id)
                return True
            order.status = 'error'
            await session.commit()
            await self.error_limit_order(session, order.id)
            logger.error(f"Failed to execute order {order.id}")
            return False

        except Exception as e:
            order.status = 'error'
            await session.commit()
            await self.error_limit_order(session, order.id)
            logger.error(f"Error executing order {order.id}: {str(e)}")
            return False

    async def check_and_execute_orders(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
        """
        async with self.session_factory() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                stmt = select(LimitOrder).where(LimitOrder.status == 'active')
                result = await session.execute(stmt)
                active_orders = result.unique().scalars().all()

                for order in active_orders:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
                    current_price = float(token_info(order.token_address)['priceUsd'])
                    if current_price is None:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
                    should_execute = False
                    if order.order_type == 'buy' and current_price <= order.trigger_price_usd:
                        should_execute = True
                        logger.info(f"Buy order {order.id} triggered at price {current_price} <= {order.trigger_price_usd}")
                    elif order.order_type == 'sell' and current_price >= order.trigger_price_usd:
                        should_execute = True
                        logger.info(f"Sell order {order.id} triggered at price {current_price} >= {order.trigger_price_usd}")

                    if should_execute:
                        await self.execute_order(order, session)

            except Exception as e:
                logger.error(f"Error checking orders: {str(e)}")

    async def monitor_prices(self, interval: int = 20):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.
        :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
        """
        self._running = True
        logger.info("Starting limit orders monitoring...")

        while self._running:
            await self.check_and_execute_orders()
            await asyncio.sleep(interval)

        logger.info("Limit orders monitoring stopped")

    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """
        self._running = False
        logger.info("Stopping limit orders monitoring...")
        

def example_action_factory(target_price: float, action_type: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param target_price: –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞.
    :param action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("buy" –∏–ª–∏ "sell").
    :return: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.
    """
    def action(current_price: float):
        if action_type == "buy" and current_price <= target_price:
            print(f"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ü–µ–Ω–µ {current_price} (—Ü–µ–ª—å: {target_price})")
        elif action_type == "sell" and current_price >= target_price:
            print(f"–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ —Ü–µ–Ω–µ {current_price} (—Ü–µ–ª—å: {target_price})")
    return action


async def main():
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    limit_orders = AsyncLimitOrders(lambda: AsyncSession())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    await limit_orders.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    monitor_task = asyncio.create_task(limit_orders.monitor_prices(interval=20))

    # –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (60 —Å–µ–∫—É–Ω–¥) –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await asyncio.sleep(60)
    limit_orders.stop()

    # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await monitor_task

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    await limit_orders.close()


if __name__ == "__main__":
    asyncio.run(main())